<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>마이페이지</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.8/angular.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.3.1/angular-ui-router.js"></script>
<style id="applicationStylesheet" type="text/css">
	.mediaViewInfo {
		--web-view-name: 마이페이지;
		--web-view-id: ;
		--web-scale-on-resize: true;
		--web-enable-deep-linking: true;
	}
	:root {
		--web-view-ids: ;
	}
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
		border: none;
	}
	** {
		position: absolute;
		width: 1366px;
		height: 768px;
		background-color: rgba(255,255,255,1);
		overflow: hidden;
		--web-view-name: 마이페이지;
		--web-view-id: ;
		--web-scale-on-resize: true;
		--web-enable-deep-linking: true;
	}
	#Achievements {
		left: 1100px;
		top: 415.46px;
		position: absolute;
		overflow: visible;
		width: 127px;
		white-space: nowrap;
		line-height: 47px;
		margin-top: -13.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 20px;
		color: rgba(34,34,34,1);
	}
	#_2307 {
		position: absolute;
		width: 197.522px;
		height: 247.431px;
		left: 1053.784px;
		top: 468.925px;
		overflow: visible;
	}
	#_2308 {
		position: absolute;
		width: 197.522px;
		height: 247.431px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#_2285 {
		position: absolute;
		width: 176.503px;
		height: 247.431px;
		left: 21.019px;
		top: 0px;
		overflow: visible;
	}
	#_700 {
		fill: rgba(255,255,255,1);
	}
	._700 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.161));
		position: absolute;
		overflow: visible;
		width: 194.306px;
		height: 265.431px;
		left: 0.197px;
		top: 0px;
	}
	#_714 {
		fill: rgba(214,214,214,1);
	}
	._714 {
		position: absolute;
		overflow: visible;
		width: 176.306px;
		height: 0.902px;
		left: 0px;
		top: 176.092px;
	}
	#_2306 {
		position: absolute;
		width: 36.019px;
		height: 36.019px;
		left: 0px;
		top: 153.849px;
		overflow: visible;
	}
	#_715 {
		fill: rgba(255,255,255,1);
	}
	._715 {
		filter: drop-shadow(0px 3px 6px rgba(255, 187, 0, 0.651));
		position: absolute;
		overflow: visible;
		width: 54.02px;
		height: 54.019px;
		left: 0px;
		top: 0px;
	}
	#medal {
		position: absolute;
		width: 26.298px;
		height: 29.833px;
		left: 4.86px;
		top: 5.031px;
		overflow: visible;
	}
	#_1456 {
		fill: rgba(240,56,0,1);
	}
	._1456 {
		overflow: visible;
		position: absolute;
		width: 14.094px;
		height: 11.889px;
		left: 0px;
		top: 0.079px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1457 {
		fill: rgba(255,100,26,1);
	}
	._1457 {
		overflow: visible;
		position: absolute;
		width: 21.244px;
		height: 11.289px;
		left: 5.054px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1458 {
		fill: rgba(240,56,0,1);
	}
	._1458 {
		overflow: visible;
		position: absolute;
		width: 13.291px;
		height: 11.249px;
		left: 12.75px;
		top: 0.079px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1459 {
		fill: rgba(255,218,45,1);
	}
	._1459 {
		overflow: visible;
		position: absolute;
		width: 6.136px;
		height: 6.136px;
		left: 9.54px;
		top: 9.793px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1460 {
		fill: rgba(253,191,0,1);
	}
	._1460 {
		overflow: visible;
		position: absolute;
		width: 3.068px;
		height: 6.136px;
		left: 12.56px;
		top: 9.793px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1461 {
		fill: rgba(255,242,97,1);
	}
	._1461 {
		overflow: visible;
		position: absolute;
		width: 19.714px;
		height: 20.59px;
		left: 2.751px;
		top: 9.244px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1462 {
		fill: rgba(255,218,45,1);
	}
	._1462 {
		overflow: visible;
		position: absolute;
		width: 10.227px;
		height: 20.59px;
		left: 12.238px;
		top: 9.244px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1463 {
		fill: rgba(255,218,45,1);
	}
	._1463 {
		overflow: visible;
		position: absolute;
		width: 15.624px;
		height: 16.499px;
		left: 4.796px;
		top: 11.289px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1464 {
		fill: rgba(253,191,0,1);
	}
	._1464 {
		overflow: visible;
		position: absolute;
		width: 8.181px;
		height: 16.499px;
		left: 12.444px;
		top: 11.289px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1465 {
		fill: rgba(255,242,97,1);
	}
	._1465 {
		overflow: visible;
		position: absolute;
		width: 14.501px;
		height: 11.747px;
		left: 5.499px;
		top: 13.374px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1466 {
		fill: rgba(255,218,45,1);
	}
	._1466 {
		overflow: visible;
		position: absolute;
		width: 7.251px;
		height: 11.747px;
		left: 12.75px;
		top: 13.374px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1467 {
		fill: rgba(255,242,97,1);
	}
	._1467 {
		overflow: visible;
		position: absolute;
		width: 17.669px;
		height: 4.091px;
		left: 3.663px;
		top: 9.283px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_1468 {
		fill: rgba(255,218,45,1);
	}
	._1468 {
		overflow: visible;
		position: absolute;
		width: 9.204px;
		height: 4.091px;
		left: 12.75px;
		top: 9.283px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_2301 {
		position: absolute;
		width: 146.922px;
		height: 192.074px;
		left: 35.462px;
		top: 22.679px;
		overflow: visible;
	}
	#_2284 {
		position: absolute;
		width: 146.922px;
		height: 76.131px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#speedometer {
		position: absolute;
		width: 77.499px;
		height: 76.131px;
		left: 69.423px;
		top: 0px;
		overflow: visible;
	}
	#Gauge {
		position: absolute;
		width: 77.499px;
		height: 76.131px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#_2283 {
		position: absolute;
		width: 77.499px;
		height: 76.131px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#_1455 {
		fill: rgba(214,214,214,1);
	}
	._1455 {
		overflow: visible;
		position: absolute;
		width: 77.499px;
		height: 76.132px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#speedometer_bg {
		position: absolute;
		width: 77.5px;
		height: 76.131px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Gauge_bh {
		position: absolute;
		width: 77.5px;
		height: 76.131px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#_2283_bi {
		position: absolute;
		width: 77.5px;
		height: 76.131px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#_1455_bj {
		fill: rgba(50,207,154,1);
	}
	._1455_bj {
		overflow: visible;
		position: absolute;
		width: 77.5px;
		height: 76.131px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#ID50 {
		left: 50.363px;
		top: 65.211px;
		position: absolute;
		overflow: visible;
		width: 44px;
		white-space: nowrap;
		line-height: 46px;
		margin-top: -11.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 23px;
		color: rgba(34,34,34,1);
	}
	#Finished {
		left: 46.756px;
		top: 108.992px;
		position: absolute;
		overflow: visible;
		width: 50px;
		white-space: nowrap;
		line-height: 46px;
		margin-top: -16.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 13px;
		color: rgba(34,34,34,1);
	}
	#Medal_for_illustration {
		left: 26.921px;
		top: 171.648px;
		position: absolute;
		overflow: visible;
		width: 74px;
		white-space: nowrap;
		line-height: 37px;
		margin-top: -14.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 8px;
		color: rgba(34,34,34,1);
	}
	#Winner {
		left: 26.921px;
		top: 186.074px;
		position: absolute;
		overflow: visible;
		width: 17px;
		white-space: nowrap;
		line-height: 35px;
		margin-top: -15px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 5px;
		color: rgba(167,167,167,1);
	}
	#_2079 {
		position: absolute;
		width: 93.766px;
		height: 107.804px;
		left: 115px;
		top: 171.11px;
		overflow: visible;
	}
	#ID6 {
		position: absolute;
		width: 93.766px;
		height: 93.766px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#_193 {
		fill: rgba(55,203,153,1);
	}
	._193 {
		position: absolute;
		overflow: visible;
		width: 26.329px;
		height: 26.329px;
		left: 32.718px;
		top: 81.475px;
	}
	#_1473 {
		fill: rgba(255,255,255,1);
	}
	._1473 {
		overflow: visible;
		position: absolute;
		width: 12.204px;
		height: 7.739px;
		left: 40.603px;
		top: 90.77px;
		transform: matrix(1,0,0,1,0,0);
	}
	#_ {
		left: 309.371px;
		top: 94px;
		position: absolute;
		overflow: visible;
		width: 86px;
		white-space: nowrap;
		line-height: 47px;
		margin-top: -13.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 20px;
		color: rgba(34,34,34,1);
	}
	#_2310 {
		position: absolute;
		width: 649.515px;
		height: 247.431px;
		left: 309.371px;
		top: 148.465px;
		overflow: visible;
	}
	#_721 {
		fill: rgba(255,255,255,1);
	}
	._721 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.161));
		position: absolute;
		overflow: visible;
		width: 634.693px;
		height: 133.404px;
		left: 32.823px;
		top: 132.026px;
	}
	#_706 {
		fill: rgba(255,255,255,1);
	}
	._706 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.161));
		position: absolute;
		overflow: visible;
		width: 634.693px;
		height: 133.404px;
		left: 32.823px;
		top: 0px;
	}
	#daniel-bystedt-rob-1 {
		position: absolute;
		width: 110.896px;
		height: 115.404px;
		left: 0px;
		top: 0.105px;
		overflow: visible;
	}
	#_2282 {
		position: absolute;
		width: 65px;
		height: 34.54px;
		left: 152.41px;
		top: 65.702px;
		overflow: visible;
	}
	#Blender_28 {
		left: 0px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 66px;
		white-space: nowrap;
		line-height: 46px;
		margin-top: -16.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 13px;
		color: rgba(34,34,34,1);
	}
	#All_time {
		left: 0px;
		top: 24.54px;
		position: absolute;
		overflow: visible;
		width: 28px;
		white-space: nowrap;
		line-height: 37px;
		margin-top: -14.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 8px;
		color: rgba(167,167,167,1);
	}
	#_2281 {
		position: absolute;
		width: 96px;
		height: 34.54px;
		left: 153.614px;
		top: 172.458px;
		overflow: visible;
	}
	#Adobe_Illustrator {
		left: 0px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 97px;
		white-space: nowrap;
		line-height: 46px;
		margin-top: -16.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 13px;
		color: rgba(34,34,34,1);
	}
	#All_time_b {
		left: 0px;
		top: 24.54px;
		position: absolute;
		overflow: visible;
		width: 28px;
		white-space: nowrap;
		line-height: 37px;
		margin-top: -14.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 8px;
		color: rgba(167,167,167,1);
	}
	#_707 {
		fill: rgba(50,207,154,1);
	}
	._707 {
		filter: drop-shadow(0px 6px 9px rgba(67, 70, 225, 0.51));
		position: absolute;
		overflow: visible;
		width: 75.579px;
		height: 75.579px;
		left: 583.629px;
		top: 59.312px;
	}
	#_5 {
		fill: rgba(255,255,255,1);
	}
	._5 {
		overflow: visible;
		position: absolute;
		width: 15.457px;
		height: 13.249px;
		transform: translate(-631.847px, -184px) matrix(1,0,0,1,1234.3714,261.9766) rotate(90deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#_709 {
		fill: rgba(214,214,214,1);
	}
	._709 {
		position: absolute;
		overflow: visible;
		width: 100.979px;
		height: 2.705px;
		left: 367.555px;
		top: 190.687px;
	}
	#_710 {
		fill: rgba(50,207,153,1);
	}
	._710 {
		position: absolute;
		overflow: visible;
		width: 73.931px;
		height: 2.705px;
		left: 366.03px;
		top: 190.687px;
	}
	#_711 {
		fill: rgba(214,214,214,1);
	}
	._711 {
		position: absolute;
		overflow: visible;
		width: 100.979px;
		height: 2.705px;
		left: 367.555px;
		top: 57.854px;
	}
	#_712 {
		fill: rgba(50,208,154,1);
	}
	._712 {
		position: absolute;
		overflow: visible;
		width: 48.686px;
		height: 2.705px;
		left: 364.668px;
		top: 57.854px;
	}
	#ID67 {
		left: 485.937px;
		top: 181.475px;
		position: absolute;
		overflow: visible;
		width: 25px;
		white-space: nowrap;
		line-height: 46px;
		margin-top: -16.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 13px;
		color: rgba(167,167,167,1);
	}
	#ID45 {
		left: 485.937px;
		top: 75.532px;
		position: absolute;
		overflow: visible;
		width: 25px;
		white-space: nowrap;
		line-height: 46px;
		margin-top: -16.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 13px;
		color: rgba(167,167,167,1);
	}
	#daniel-bystedt-rob-1_cb {
		position: absolute;
		width: 110.896px;
		height: 115.404px;
		left: 0px;
		top: 132.026px;
		overflow: visible;
	}
	#_7 {
		fill: rgba(255,255,255,1);
	}
	._7 {
		overflow: visible;
		position: absolute;
		width: 15.457px;
		height: 13.249px;
		transform: translate(-631.847px, -184px) matrix(1,0,0,1,1234.3714,391.3936) rotate(90deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#_722 {
		fill: rgba(50,207,154,1);
	}
	._722 {
		filter: drop-shadow(0px 6px 9px rgba(67, 70, 225, 0.51));
		position: absolute;
		overflow: visible;
		width: 75.579px;
		height: 75.579px;
		left: 583.629px;
		top: 188.601px;
	}
	#_11 {
		fill: rgba(255,255,255,1);
	}
	._11 {
		overflow: visible;
		position: absolute;
		width: 15.457px;
		height: 13.249px;
		transform: translate(-631.847px, -184px) matrix(1,0,0,1,1234.3714,390.266) rotate(90deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#_14 {
		position: absolute;
		width: 650px;
		height: 99px;
		left: 308.886px;
		top: 495.925px;
		overflow: visible;
	}
	#_12 {
		fill: rgba(255,255,255,1);
	}
	._12 {
		position: absolute;
		overflow: visible;
		width: 650px;
		height: 99px;
		left: 0px;
		top: 0px;
	}
	#_10 {
		position: absolute;
		width: 40px;
		height: 22px;
		left: 28px;
		top: 10px;
		overflow: visible;
	}
	#_9 {
		position: absolute;
		width: 40px;
		height: 22px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Title {
		left: 0px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 41px;
		white-space: nowrap;
		text-align: left;
		font-family: Times New Roman;
		font-style: normal;
		font-weight: bold;
		font-size: 20px;
		color: rgba(51,51,51,1);
	}
	#_Hi_Mike_thanks_for_applying_f {
		left: 28px;
		top: 43px;
		position: absolute;
		overflow: visible;
		width: 490px;
		height: 51px;
		line-height: 24px;
		margin-top: -4px;
		text-align: left;
		font-family: Trebuchet MS;
		font-style: normal;
		font-weight: normal;
		font-size: 16px;
		color: rgba(51,51,51,0.702);
	}
	#_20210724__1130 {
		left: 454px;
		top: 10px;
		position: absolute;
		overflow: visible;
		width: 182px;
		white-space: nowrap;
		text-align: right;
		font-family: Times New Roman;
		font-style: normal;
		font-weight: bold;
		font-size: 14px;
		color: rgba(51,51,51,1);
	}
	#__ {
		left: 309.371px;
		top: 441.46px;
		position: absolute;
		overflow: visible;
		width: 91px;
		white-space: nowrap;
		line-height: 47px;
		margin-top: -13.5px;
		text-align: left;
		font-family: Roboto;
		font-style: normal;
		font-weight: normal;
		font-size: 20px;
		color: rgba(34,34,34,1);
	}
	#Header {
		position: absolute;
		width: 1095px;
		height: 57px;
		left: 156px;
		top: 38px;
		overflow: visible;
	}
	#_co {
		left: 1027px;
		top: 19px;
		position: absolute;
		overflow: visible;
		width: 46px;
		white-space: nowrap;
		text-align: left;
		font-family: Times New Roman;
		font-style: normal;
		font-weight: normal;
		font-size: 15px;
		color: rgba(255,255,255,1);
	}
	#home_button {
		position: absolute;
		width: 57px;
		height: 57px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#_58_cr {
		fill: url(#_58_cr);
	}
	._58_cr {
		position: absolute;
		overflow: visible;
		width: 57px;
		height: 57px;
		left: 0px;
		top: 0px;
	}
	#_cs {
		left: 13px;
		top: 12px;
		position: absolute;
		overflow: visible;
		width: 23px;
		white-space: nowrap;
		text-align: left;
		font-family: Times New Roman;
		font-style: normal;
		font-weight: normal;
		font-size: 29px;
		color: rgba(63,61,86,1);
	}
	#profile {
		position: absolute;
		width: 114px;
		height: 28.294px;
		left: 981px;
		top: 14.853px;
		overflow: visible;
	}
	#down {
		fill: transparent;
		stroke: rgba(112,112,112,1);
		stroke-width: 2px;
		stroke-linejoin: miter;
		stroke-linecap: round;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.down {
		overflow: visible;
		position: absolute;
		width: 8.589px;
		height: 3.83px;
		transform: translate(0px, 0px) matrix(1,0,0,1,104.2519,13.7944) rotate(180deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#OOO {
		left: 47px;
		top: 4.294px;
		position: absolute;
		overflow: visible;
		width: 68px;
		height: 24px;
		text-align: left;
		font-family: Segoe UI;
		font-style: normal;
		font-weight: normal;
		font-size: 15px;
		color: rgba(112,112,112,1);
	}
	#profile_cw {
		position: absolute;
		width: 28.588px;
		height: 27.588px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#_2327 {
		position: absolute;
		width: 650px;
		height: 99px;
		left: 308.886px;
		top: 616.925px;
		overflow: visible;
	}
	#_12_cy {
		fill: rgba(255,255,255,1);
	}
	._12_cy {
		position: absolute;
		overflow: visible;
		width: 650px;
		height: 99px;
		left: 0px;
		top: 0px;
	}
	#_10_cz {
		position: absolute;
		width: 40px;
		height: 22px;
		left: 28px;
		top: 10px;
		overflow: visible;
	}
	#_9_c {
		position: absolute;
		width: 40px;
		height: 22px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Title_c {
		left: 0px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 41px;
		white-space: nowrap;
		text-align: left;
		font-family: Times New Roman;
		font-style: normal;
		font-weight: bold;
		font-size: 20px;
		color: rgba(51,51,51,1);
	}
	#_Hi_Mike_thanks_for_applying_f_c {
		left: 28px;
		top: 43px;
		position: absolute;
		overflow: visible;
		width: 490px;
		height: 51px;
		line-height: 24px;
		margin-top: -4px;
		text-align: left;
		font-family: Trebuchet MS;
		font-style: normal;
		font-weight: normal;
		font-size: 16px;
		color: rgba(51,51,51,0.702);
	}
	#_20210724__1130_c {
		left: 454px;
		top: 10px;
		position: absolute;
		overflow: visible;
		width: 182px;
		white-space: nowrap;
		text-align: right;
		font-family: Times New Roman;
		font-style: normal;
		font-weight: bold;
		font-size: 14px;
		color: rgba(51,51,51,1);
	}
	#_c {
		left: 986px;
		top: 57px;
		position: absolute;
		overflow: visible;
		width: 76px;
		white-space: nowrap;
		text-align: left;
		font-family: Times New Roman;
		font-style: normal;
		font-weight: normal;
		font-size: 15px;
		color: rgba(112,112,112,1);
	}
	#_da {
		left: 886px;
		top: 57px;
		position: absolute;
		overflow: visible;
		width: 75px;
		height: 23px;
		text-align: left;
		font-family: Segoe UI;
		font-style: normal;
		font-weight: normal;
		font-size: 15px;
		color: rgba(112,112,112,1);
	}
	#_db {
		left: 785px;
		top: 57px;
		position: absolute;
		overflow: visible;
		width: 75px;
		height: 23px;
		text-align: left;
		font-family: Segoe UI;
		font-style: normal;
		font-weight: normal;
		font-size: 15px;
		color: rgba(112,112,112,1);
	}
	#_dc {
		left: 684px;
		top: 57px;
		position: absolute;
		overflow: visible;
		width: 75px;
		height: 23px;
		text-align: left;
		font-family: Segoe UI;
		font-style: normal;
		font-weight: normal;
		font-size: 15px;
		color: rgba(112,112,112,1);
	}
	#_dd {
		left: 613px;
		top: 57px;
		position: absolute;
		overflow: visible;
		width: 31px;
		white-space: nowrap;
		text-align: left;
		font-family: Times New Roman;
		font-style: normal;
		font-weight: normal;
		font-size: 15px;
		color: rgba(54,54,54,1);
	}
</style>
<script id="applicationScript">
///////////////////////////////////////
// INITIALIZATION
///////////////////////////////////////

/**
 * Functionality for scaling, showing by media query, and navigation between multiple pages on a single page. 
 * Code subject to change.
 **/

if (window.console==null) { window["console"] = { log : function() {} } }; // some browsers do not set console

var Application = function() {
	// event constants
	this.prefix = "--web-";
	this.NAVIGATION_CHANGE = "viewChange";
	this.VIEW_NOT_FOUND = "viewNotFound";
	this.VIEW_CHANGE = "viewChange";
	this.VIEW_CHANGING = "viewChanging";
	this.STATE_NOT_FOUND = "stateNotFound";
	this.APPLICATION_COMPLETE = "applicationComplete";
	this.APPLICATION_RESIZE = "applicationResize";
	this.SIZE_STATE_NAME = "data-is-view-scaled";
	this.STATE_NAME = this.prefix + "state";

	this.lastTrigger = null;
	this.lastView = null;
	this.lastState = null;
	this.lastOverlay = null;
	this.currentView = null;
	this.currentState = null;
	this.currentOverlay = null;
	this.currentQuery = {index: 0, rule: null, mediaText: null, id: null};
	this.inclusionQuery = "(min-width: 0px)";
	this.exclusionQuery = "none and (min-width: 99999px)";
	this.LastModifiedDateLabelName = "LastModifiedDateLabel";
	this.viewScaleSliderId = "ViewScaleSliderInput";
	this.pageRefreshedName = "showPageRefreshedNotification";
	this.applicationStylesheet = null;
	this.mediaQueryDictionary = {};
	this.viewsDictionary = {};
	this.addedViews = [];
	this.views = {};
	this.viewIds = [];
	this.viewQueries = {};
	this.overlays = {};
	this.overlayIds = [];
	this.numberOfViews = 0;
	this.verticalPadding = 0;
	this.horizontalPadding = 0;
	this.stateName = null;
	this.viewScale = 1;
	this.viewLeft = 0;
	this.viewTop = 0;
	this.horizontalScrollbarsNeeded = false;
	this.verticalScrollbarsNeeded = false;

	// view settings
	this.showUpdateNotification = false;
	this.showNavigationControls = false;
	this.scaleViewsToFit = false;
	this.scaleToFitOnDoubleClick = false;
	this.actualSizeOnDoubleClick = false;
	this.scaleViewsOnResize = false;
	this.navigationOnKeypress = false;
	this.showViewName = false;
	this.enableDeepLinking = true;
	this.refreshPageForChanges = false;
	this.showRefreshNotifications = true;

	// view controls
	this.scaleViewSlider = null;
	this.lastModifiedLabel = null;
	this.supportsPopState = false; // window.history.pushState!=null;
	this.initialized = false;

	// refresh properties
	this.refreshDuration = 250;
	this.lastModifiedDate = null;
	this.refreshRequest = null;
	this.refreshInterval = null;
	this.refreshContent = null;
	this.refreshContentSize = null;
	this.refreshCheckContent = false;
	this.refreshCheckContentSize = false;

	var self = this;

	self.initialize = function(event) {
		var view = self.getVisibleView();
		var views = self.getVisibleViews();
		if (view==null) view = self.getInitialView();
		self.collectViews();
		self.collectOverlays();
		self.collectMediaQueries();

		for (let index = 0; index < views.length; index++) {
			var view = views[index];
			self.setViewOptions(view);
			self.setViewVariables(view);
			self.centerView(view);
		}

		// sometimes the body size is 0 so we call this now and again later
		if (self.initialized) {
			window.addEventListener(self.NAVIGATION_CHANGE, self.viewChangeHandler);
			window.addEventListener("keyup", self.keypressHandler);
			window.addEventListener("keypress", self.keypressHandler);
			window.addEventListener("resize", self.resizeHandler);
			window.document.addEventListener("dblclick", self.doubleClickHandler);

			if (self.supportsPopState) {
				window.addEventListener('popstate', self.popStateHandler);
			}
			else {
				window.addEventListener('hashchange', self.hashChangeHandler);
			}

			// we are ready to go
			window.dispatchEvent(new Event(self.APPLICATION_COMPLETE));
		}

		if (self.initialized==false) {
			if (self.enableDeepLinking) {
				self.syncronizeViewToURL();
			} 
	
			if (self.refreshPageForChanges) {
				self.setupRefreshForChanges();
			}
	
			self.initialized = true;
		}
		
		if (self.scaleViewsToFit) {
			self.viewScale = self.scaleViewToFit(view);
			
			if (self.viewScale<0) {
				setTimeout(self.scaleViewToFit, 500, view);
			}
		}
		else if (view) {
			self.viewScale = self.getViewScaleValue(view);
			self.centerView(view);
			self.updateSliderValue(self.viewScale);
		}
		else {
			// no view found
		}
	
		if (self.showUpdateNotification) {
			self.showNotification();
		}

		//"addEventListener" in window ? null : window.addEventListener = window.attachEvent;
		//"addEventListener" in document ? null : document.addEventListener = document.attachEvent;
	}


	///////////////////////////////////////
	// AUTO REFRESH 
	///////////////////////////////////////

	self.setupRefreshForChanges = function() {
		self.refreshRequest = new XMLHttpRequest();

		if (!self.refreshRequest) {
			return false;
		}

		// get document start values immediately
		self.requestRefreshUpdate();
	}

	/**
	 * Attempt to check the last modified date by the headers 
	 * or the last modified property from the byte array (experimental)
	 **/
	self.requestRefreshUpdate = function() {
		var url = document.location.href;
		var protocol = window.location.protocol;
		var method;
		
		try {

			if (self.refreshCheckContentSize) {
				self.refreshRequest.open('HEAD', url, true);
			}
			else if (self.refreshCheckContent) {
				self.refreshContent = document.documentElement.outerHTML;
				self.refreshRequest.open('GET', url, true);
				self.refreshRequest.responseType = "text";
			}
			else {

				// get page last modified date for the first call to compare to later
				if (self.lastModifiedDate==null) {

					// File system does not send headers in FF so get blob if possible
					if (protocol=="file:") {
						self.refreshRequest.open("GET", url, true);
						self.refreshRequest.responseType = "blob";
					}
					else {
						self.refreshRequest.open("HEAD", url, true);
						self.refreshRequest.responseType = "blob";
					}

					self.refreshRequest.onload = self.refreshOnLoadOnceHandler;

					// In some browsers (Chrome & Safari) this error occurs at send: 
					// 
					// Chrome - Access to XMLHttpRequest at 'file:///index.html' from origin 'null' 
					// has been blocked by CORS policy: 
					// Cross origin requests are only supported for protocol schemes: 
					// http, data, chrome, chrome-extension, https.
					// 
					// Safari - XMLHttpRequest cannot load file:///Users/user/Public/index.html. Cross origin requests are only supported for HTTP.
					// 
					// Solution is to run a local server, set local permissions or test in another browser
					self.refreshRequest.send(null);

					// In MS browsers the following behavior occurs possibly due to an AJAX call to check last modified date: 
					// 
					// DOM7011: The code on this page disabled back and forward caching.

					// In Brave (Chrome) error when on the server
					// index.js:221 HEAD https://www.example.com/ net::ERR_INSUFFICIENT_RESOURCES
					// self.refreshRequest.send(null);

				}
				else {
					self.refreshRequest = new XMLHttpRequest();
					self.refreshRequest.onreadystatechange = self.refreshHandler;
					self.refreshRequest.ontimeout = function() {
						self.log("Couldn't find page to check for updates");
					}
					
					var method;
					if (protocol=="file:") {
						method = "GET";
					}
					else {
						method = "HEAD";
					}

					//refreshRequest.open('HEAD', url, true);
					self.refreshRequest.open(method, url, true);
					self.refreshRequest.responseType = "blob";
					self.refreshRequest.send(null);
				}
			}
		}
		catch (error) {
			self.log("Refresh failed for the following reason:")
			self.log(error);
		}
	}

	self.refreshHandler = function() {
		var contentSize;

		try {

			if (self.refreshRequest.readyState === XMLHttpRequest.DONE) {
				
				if (self.refreshRequest.status === 2 || 
					self.refreshRequest.status === 200) {
					var pageChanged = false;

					self.updateLastModifiedLabel();

					if (self.refreshCheckContentSize) {
						var lastModifiedHeader = self.refreshRequest.getResponseHeader("Last-Modified");
						contentSize = self.refreshRequest.getResponseHeader("Content-Length");
						//lastModifiedDate = refreshRequest.getResponseHeader("Last-Modified");
						var headers = self.refreshRequest.getAllResponseHeaders();
						var hasContentHeader = headers.indexOf("Content-Length")!=-1;
						
						if (hasContentHeader) {
							contentSize = self.refreshRequest.getResponseHeader("Content-Length");

							// size has not been set yet
							if (self.refreshContentSize==null) {
								self.refreshContentSize = contentSize;
								// exit and let interval call this method again
								return;
							}

							if (contentSize!=self.refreshContentSize) {
								pageChanged = true;
							}
						}
					}
					else if (self.refreshCheckContent) {

						if (self.refreshRequest.responseText!=self.refreshContent) {
							pageChanged = true;
						}
					}
					else {
						lastModifiedHeader = self.getLastModified(self.refreshRequest);

						if (self.lastModifiedDate!=lastModifiedHeader) {
							self.log("lastModifiedDate:" + self.lastModifiedDate + ",lastModifiedHeader:" +lastModifiedHeader);
							pageChanged = true;
						}

					}

					
					if (pageChanged) {
						clearInterval(self.refreshInterval);
						self.refreshUpdatedPage();
						return;
					}

				}
				else {
					self.log('There was a problem with the request.');
				}

			}
		}
		catch( error ) {
			//console.log('Caught Exception: ' + error);
		}
	}

	self.refreshOnLoadOnceHandler = function(event) {

		// get the last modified date
		if (self.refreshRequest.response) {
			self.lastModifiedDate = self.getLastModified(self.refreshRequest);

			if (self.lastModifiedDate!=null) {

				if (self.refreshInterval==null) {
					self.refreshInterval = setInterval(self.requestRefreshUpdate, self.refreshDuration);
				}
			}
			else {
				self.log("Could not get last modified date from the server");
			}
		}
	}

	self.refreshUpdatedPage = function() {
		if (self.showRefreshNotifications) {
			var date = new Date().setTime((new Date().getTime()+10000));
			document.cookie = encodeURIComponent(self.pageRefreshedName) + "=true" + "; max-age=6000;" + " path=/";
		}

		document.location.reload(true);
	}

	self.showNotification = function(duration) {
		var notificationID = self.pageRefreshedName+"ID";
		var notification = document.getElementById(notificationID);
		if (duration==null) duration = 4000;

		if (notification!=null) {return;}

		notification = document.createElement("div");
		notification.id = notificationID;
		notification.textContent = "PAGE UPDATED";
		var styleRule = ""
		styleRule = "position: fixed; padding: 7px 16px 6px 16px; font-family: Arial, sans-serif; font-size: 10px; font-weight: bold; left: 50%;";
		styleRule += "top: 20px; background-color: rgba(0,0,0,.5); border-radius: 12px; color:rgb(235, 235, 235); transition: all 2s linear;";
		styleRule += "transform: translateX(-50%); letter-spacing: .5px; filter: drop-shadow(2px 2px 6px rgba(0, 0, 0, .1))";
		notification.setAttribute("style", styleRule);

		notification.className= "PageRefreshedClass";
		
		document.body.appendChild(notification);

		setTimeout(function() {
			notification.style.opacity = "0";
			notification.style.filter = "drop-shadow( 0px 0px 0px rgba(0,0,0, .5))";
			setTimeout(function() {
				notification.parentNode.removeChild(notification);
			}, duration)
		}, duration);

		document.cookie = encodeURIComponent(self.pageRefreshedName) + "=; max-age=1; path=/";
	}

	/**
	 * Get the last modified date from the header 
	 * or file object after request has been received
	 **/
	self.getLastModified = function(request) {
		var date;

		// file protocol - FILE object with last modified property
		if (request.response && request.response.lastModified) {
			date = request.response.lastModified;
		}
		
		// http protocol - check headers
		if (date==null) {
			date = request.getResponseHeader("Last-Modified");
		}

		return date;
	}

	self.updateLastModifiedLabel = function() {
		var labelValue = "";
		
		if (self.lastModifiedLabel==null) {
			self.lastModifiedLabel = document.getElementById("LastModifiedLabel");
		}

		if (self.lastModifiedLabel) {
			var seconds = parseInt(((new Date().getTime() - Date.parse(document.lastModified)) / 1000 / 60) * 100 + "");
			var minutes = 0;
			var hours = 0;

			if (seconds < 60) {
				seconds = Math.floor(seconds/10)*10;
				labelValue = seconds + " seconds";
			}
			else {
				minutes = parseInt((seconds/60) + "");

				if (minutes>60) {
					hours = parseInt((seconds/60/60) +"");
					labelValue += hours==1 ? " hour" : " hours";
				}
				else {
					labelValue = minutes+"";
					labelValue += minutes==1 ? " minute" : " minutes";
				}
			}
			
			if (seconds<10) {
				labelValue = "Updated now";
			}
			else {
				labelValue = "Updated " + labelValue + " ago";
			}

			if (self.lastModifiedLabel.firstElementChild) {
				self.lastModifiedLabel.firstElementChild.textContent = labelValue;

			}
			else if ("textContent" in self.lastModifiedLabel) {
				self.lastModifiedLabel.textContent = labelValue;
			}
		}
	}

	self.getShortString = function(string, length) {
		if (length==null) length = 30;
		string = string!=null ? string.substr(0, length).replace(/\n/g, "") : "[String is null]";
		return string;
	}

	self.getShortNumber = function(value, places) {
		if (places==null || places<1) places = 4;
		value = Math.round(value * Math.pow(10,places)) / Math.pow(10, places);
		return value;
	}

	///////////////////////////////////////
	// NAVIGATION CONTROLS
	///////////////////////////////////////

	self.updateViewLabel = function() {
		var viewNavigationLabel = document.getElementById("ViewNavigationLabel");
		var view = self.getVisibleView();
		var viewIndex = view ? self.getViewIndex(view) : -1;
		var viewName = view ? self.getViewPreferenceValue(view, self.prefix + "view-name") : null;
		var viewId = view ? view.id : null;

		if (viewNavigationLabel && view) {
			if (viewName && viewName.indexOf('"')!=-1) {
				viewName = viewName.replace(/"/g, "");
			}

			if (self.showViewName) {
				viewNavigationLabel.textContent = viewName;
				self.setTooltip(viewNavigationLabel, viewIndex + 1 + " of " + self.numberOfViews);
			}
			else {
				viewNavigationLabel.textContent = viewIndex + 1 + " of " + self.numberOfViews;
				self.setTooltip(viewNavigationLabel, viewName);
			}

		}
	}

	self.updateURL = function(view) {
		view = view == null ? self.getVisibleView() : view;
		var viewId = view ? view.id : null
		var viewFragment = view ? "#"+ viewId : null;

		if (viewId && self.viewIds.length>1 && self.enableDeepLinking) {

			if (self.supportsPopState==false) {
				self.setFragment(viewId);
			}
			else {
				if (viewFragment!=window.location.hash) {

					if (window.location.hash==null) {
						window.history.replaceState({name:viewId}, null, viewFragment);
					}
					else {
						window.history.pushState({name:viewId}, null, viewFragment);
					}
				}
			}
		}
	}

	self.updateURLState = function(view, stateName) {
		stateName = view && (stateName=="" || stateName==null) ? self.getStateNameByViewId(view.id) : stateName;

		if (self.supportsPopState==false) {
			self.setFragment(stateName);
		}
		else {
			if (stateName!=window.location.hash) {

				if (window.location.hash==null) {
					window.history.replaceState({name:view.viewId}, null, stateName);
				}
				else {
					window.history.pushState({name:view.viewId}, null, stateName);
				}
			}
		}
	}

	self.setFragment = function(value) {
		window.location.hash = "#" + value;
	}

	self.setTooltip = function(element, value) {
		// setting the tooltip in edge causes a page crash on hover
		if (/Edge/.test(navigator.userAgent)) { return; }

		if ("title" in element) {
			element.title = value;
		}
	}

	self.getStylesheetRules = function(styleSheet) {
		try {
			if (styleSheet) return styleSheet.cssRules || styleSheet.rules;
	
			return document.styleSheets[0]["cssRules"] || document.styleSheets[0]["rules"];
		}
		catch (error) {
			// ERRORS:
			// SecurityError: The operation is insecure.
			// Errors happen when script loads before stylesheet or loading an external css locally

			// InvalidAccessError: A parameter or an operation is not supported by the underlying object
			// Place script after stylesheet

			console.log(error);
			if (error.toString().indexOf("The operation is insecure")!=-1) {
				console.log("Load the stylesheet before the script or load the stylesheet inline until it can be loaded on a server")
			}
			return [];
		}
	}

	/**
	 * If single page application hide all of the views. 
	 * @param {Number} selectedIndex if provided shows the view at index provided
	 **/
	self.hideViews = function(selectedIndex, animation) {
		var rules = self.getStylesheetRules();
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];

			if (rule.media!=null) {

				if (queryIndex==selectedIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = selectedIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
				}
				else {
					if (animation) {
						self.fadeOut(rule)
					}
					else {
						self.disableMediaQuery(rule);
					}
				}
				
				queryIndex++;
			}
		}

		self.numberOfViews = queryIndex;
		self.updateViewLabel();
		self.updateURL();

		self.dispatchViewChange();

		var view = self.getVisibleView();
		var viewIndex = view ? self.getViewIndex(view) : -1;

		return viewIndex==selectedIndex ? view : null;
	}

	/**
	 * Hide view
	 * @param {Object} view element to hide
	 **/
	self.hideView = function(view) {
		var rule = view ? self.mediaQueryDictionary[view.id] : null;

		if (rule) {
			self.disableMediaQuery(rule);
		}
	}

	/**
	 * Hide overlay
	 * @param {Object} overlay element to hide
	 **/
	self.hideOverlay = function(overlay) {
		var rule = overlay ? self.mediaQueryDictionary[overlay.id] : null;

		if (rule) {
			self.disableMediaQuery(rule);

			//if (self.showByMediaQuery) {
				overlay.style.display = "none";
			//}
		}
	}

	/**
	 * Show the view by media query. Does not hide current views
	 * Sets view options by default
	 * @param {Object} view element to show
	 * @param {Boolean} setViewOptions sets view options if null or true
	 */
	self.showViewByMediaQuery = function(view, setViewOptions) {
		var id = view ? view.id : null;
		var query = id ? self.mediaQueryDictionary[id] : null;
		var isOverlay = view ? self.isOverlay(view) : false;
		setViewOptions = setViewOptions==null ? true : setViewOptions;

		if (query) {
			self.enableMediaQuery(query);

			if (isOverlay && view && setViewOptions) {
				self.setViewVariables(null, view);
			}
			else {
				if (view && setViewOptions) self.setViewOptions(view);
				if (view && setViewOptions) self.setViewVariables(view);
			}
		}
	}

	/**
	 * Show the view. Does not hide current views
	 */
	self.showView = function(view, setViewOptions) {
		var id = view ? view.id : null;
		var query = id ? self.mediaQueryDictionary[id] : null;
		var display = null;
		setViewOptions = setViewOptions==null ? true : setViewOptions;

		if (query) {
			self.enableMediaQuery(query);
			if (view==null) view =self.getVisibleView();
			if (view && setViewOptions) self.setViewOptions(view);
		}
		else if (id) {
			display = window.getComputedStyle(view).getPropertyValue("display");
			if (display=="" || display=="none") {
				view.style.display = "block";
			}
		}

		if (view) {
			if (self.currentView!=null) {
				self.lastView = self.currentView;
			}

			self.currentView = view;
		}
	}

	self.showViewById = function(id, setViewOptions) {
		var view = id ? self.getViewById(id) : null;

		if (view) {
			self.showView(view);
			return;
		}

		self.log("View not found '" + id + "'");
	}

	self.getElementView = function(element) {
		var view = element;
		var viewFound = false;

		while (viewFound==false || view==null) {
			if (view && self.viewsDictionary[view.id]) {
				return view;
			}
			view = view.parentNode;
		}
	}

	/**
	 * Show overlay over view
	 * @param {Event | HTMLElement} event event or html element with styles applied
	 * @param {String} id id of view or view reference
	 * @param {Number} x x location
	 * @param {Number} y y location
	 */
	self.showOverlay = function(event, id, x, y) {
		var overlay = id && typeof id === 'string' ? self.getViewById(id) : id ? id : null;
		var query = overlay ? self.mediaQueryDictionary[overlay.id] : null;
		var centerHorizontally = false;
		var centerVertically = false;
		var anchorLeft = false;
		var anchorTop = false;
		var anchorRight = false;
		var anchorBottom = false;
		var display = null;
		var reparent = true;
		var view = null;
		
		if (overlay==null || overlay==false) {
			self.log("Overlay not found, '"+ id + "'");
			return;
		}

		// get enter animation - event target must have css variables declared
		if (event) {
			var button = event.currentTarget || event; // can be event or htmlelement
			var buttonComputedStyles = getComputedStyle(button);
			var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix+"action-target").trim();
			var animation = buttonComputedStyles.getPropertyValue(self.prefix+"animation").trim();
			var isAnimated = animation!="";
			var targetType = buttonComputedStyles.getPropertyValue(self.prefix+"action-type").trim();
			var actionTarget = self.application ? null : self.getElement(actionTargetValue);
			var actionTargetStyles = actionTarget ? actionTarget.style : null;

			if (actionTargetStyles) {
				actionTargetStyles.setProperty("animation", animation);
			}

			if ("stopImmediatePropagation" in event) {
				event.stopImmediatePropagation();
			}
		}
		
		if (self.application==false || targetType=="page") {
			document.location.href = "./" + actionTargetValue;
			return;
		}

		// remove any current overlays
		if (self.currentOverlay) {

			// act as switch if same button
			if (self.currentOverlay==actionTarget || self.currentOverlay==null) {
				if (self.lastTrigger==button) {
					self.removeOverlay(isAnimated);
					return;
				}
			}
			else {
				self.removeOverlay(isAnimated);
			}
		}

		if (reparent) {
			view = self.getElementView(button);
			if (view) {
				view.appendChild(overlay);
			}
		}

		if (query) {
			//self.setElementAnimation(overlay, null);
			//overlay.style.animation = animation;
			self.enableMediaQuery(query);
			
			var display = overlay && overlay.style.display;
			
			if (overlay && display=="" || display=="none") {
				overlay.style.display = "block";
				//self.setViewOptions(overlay);
			}

			// add animation defined in event target style declaration
			if (animation && self.supportAnimations) {
				self.fadeIn(overlay, false, animation);
			}
		}
		else if (id) {

			display = window.getComputedStyle(overlay).getPropertyValue("display");

			if (display=="" || display=="none") {
				overlay.style.display = "block";
			}

			// add animation defined in event target style declaration
			if (animation && self.supportAnimations) {
				self.fadeIn(overlay, false, animation);
			}
		}

		// do not set x or y position if centering
		var horizontal = self.prefix + "center-horizontally";
		var vertical = self.prefix + "center-vertically";
		var style = overlay.style;
		var transform = [];

		centerHorizontally = self.getIsStyleDefined(id, horizontal) ? self.getViewPreferenceBoolean(overlay, horizontal) : false;
		centerVertically = self.getIsStyleDefined(id, vertical) ? self.getViewPreferenceBoolean(overlay, vertical) : false;
		anchorLeft = self.getIsStyleDefined(id, "left");
		anchorRight = self.getIsStyleDefined(id, "right");
		anchorTop = self.getIsStyleDefined(id, "top");
		anchorBottom = self.getIsStyleDefined(id, "bottom");

		
		if (self.viewsDictionary[overlay.id] && self.viewsDictionary[overlay.id].styleDeclaration) {
			style = self.viewsDictionary[overlay.id].styleDeclaration.style;
		}
		
		if (centerHorizontally) {
			style.left = "50%";
			style.transformOrigin = "0 0";
			transform.push("translateX(-50%)");
		}
		else if (anchorRight && anchorLeft) {
			style.left = x + "px";
		}
		else if (anchorRight) {
			//style.right = x + "px";
		}
		else {
			style.left = x + "px";
		}
		
		if (centerVertically) {
			style.top = "50%";
			transform.push("translateY(-50%)");
			style.transformOrigin = "0 0";
		}
		else if (anchorTop && anchorBottom) {
			style.top = y + "px";
		}
		else if (anchorBottom) {
			//style.bottom = y + "px";
		}
		else {
			style.top = y + "px";
		}

		if (transform.length) {
			style.transform = transform.join(" ");
		}

		self.currentOverlay = overlay;
		self.lastTrigger = button;
	}

	self.goBack = function() {
		if (self.currentOverlay) {
			self.removeOverlay();
		}
		else if (self.lastView) {
			self.goToView(self.lastView.id);
		}
	}

	self.removeOverlay = function(animate) {
		var overlay = self.currentOverlay;
		animate = animate===false ? false : true;

		if (overlay) {
			var style = overlay.style;
			
			if (style.animation && self.supportAnimations && animate) {
				self.reverseAnimation(overlay, true);

				var duration = self.getAnimationDuration(style.animation, true);
		
				setTimeout(function() {
					self.setElementAnimation(overlay, null);
					self.hideOverlay(overlay);
					self.currentOverlay = null;
				}, duration);
			}
			else {
				self.setElementAnimation(overlay, null);
				self.hideOverlay(overlay);
				self.currentOverlay = null;
			}
		}
	}

	/**
	 * Reverse the animation and hide after
	 * @param {Object} target element with animation
	 * @param {Boolean} hide hide after animation ends
	 */
	self.reverseAnimation = function(target, hide) {
		var lastAnimation = null;
		var style = target.style;

		style.animationPlayState = "paused";
		lastAnimation = style.animation;
		style.animation = null;
		style.animationPlayState = "paused";

		if (hide) {
			//target.addEventListener("animationend", self.animationEndHideHandler);
	
			var duration = self.getAnimationDuration(lastAnimation, true);
			var isOverlay = self.isOverlay(target);
	
			setTimeout(function() {
				self.setElementAnimation(target, null);

				if (isOverlay) {
					self.hideOverlay(target);
				}
				else {
					self.hideView(target);
				}
			}, duration);
		}

		setTimeout(function() {
			style.animation = lastAnimation;
			style.animationPlayState = "paused";
			style.animationDirection = "reverse";
			style.animationPlayState = "running";
		}, 30);
	}

	self.animationEndHandler = function(event) {
		var target = event.currentTarget;
		self.dispatchEvent(new Event(event.type));
	}

	self.isOverlay = function(view) {
		var result = view ? self.getViewPreferenceBoolean(view, self.prefix + "is-overlay") : false;

		return result;
	}

	self.animationEndHideHandler = function(event) {
		var target = event.currentTarget;
		self.setViewVariables(null, target);
		self.hideView(target);
		target.removeEventListener("animationend", self.animationEndHideHandler);
	}

	self.animationEndShowHandler = function(event) {
		var target = event.currentTarget;
		target.removeEventListener("animationend", self.animationEndShowHandler);
	}

	self.setViewOptions = function(view) {

		if (view) {
			self.minimumScale = self.getViewPreferenceValue(view, self.prefix + "minimum-scale");
			self.maximumScale = self.getViewPreferenceValue(view, self.prefix + "maximum-scale");
			self.scaleViewsToFit = self.getViewPreferenceBoolean(view, self.prefix + "scale-to-fit");
			self.scaleToFitType = self.getViewPreferenceValue(view, self.prefix + "scale-to-fit-type");
			self.scaleToFitOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + "scale-on-double-click");
			self.actualSizeOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + "actual-size-on-double-click");
			self.scaleViewsOnResize = self.getViewPreferenceBoolean(view, self.prefix + "scale-on-resize");
			self.enableScaleUp = self.getViewPreferenceBoolean(view, self.prefix + "enable-scale-up");
			self.centerHorizontally = self.getViewPreferenceBoolean(view, self.prefix + "center-horizontally");
			self.centerVertically = self.getViewPreferenceBoolean(view, self.prefix + "center-vertically");
			self.navigationOnKeypress = self.getViewPreferenceBoolean(view, self.prefix + "navigate-on-keypress");
			self.showViewName = self.getViewPreferenceBoolean(view, self.prefix + "show-view-name");
			self.refreshPageForChanges = self.getViewPreferenceBoolean(view, self.prefix + "refresh-for-changes");
			self.refreshPageForChangesInterval = self.getViewPreferenceValue(view, self.prefix + "refresh-interval");
			self.showNavigationControls = self.getViewPreferenceBoolean(view, self.prefix + "show-navigation-controls");
			self.scaleViewSlider = self.getViewPreferenceBoolean(view, self.prefix + "show-scale-controls");
			self.enableDeepLinking = self.getViewPreferenceBoolean(view, self.prefix + "enable-deep-linking");
			self.singlePageApplication = self.getViewPreferenceBoolean(view, self.prefix + "application");
			self.showByMediaQuery = self.getViewPreferenceBoolean(view, self.prefix + "show-by-media-query");
			self.showUpdateNotification = document.cookie!="" ? document.cookie.indexOf(self.pageRefreshedName)!=-1 : false;
			self.imageComparisonDuration = self.getViewPreferenceValue(view, self.prefix + "image-comparison-duration");
			self.supportAnimations = self.getViewPreferenceBoolean(view, self.prefix + "enable-animations", true);

			if (self.scaleViewsToFit) {
				var newScaleValue = self.scaleViewToFit(view);
				
				if (newScaleValue<0) {
					setTimeout(self.scaleViewToFit, 500, view);
				}
			}
			else {
				self.viewScale = self.getViewScaleValue(view);
				self.viewToFitWidthScale = self.getViewFitToViewportWidthScale(view, self.enableScaleUp)
				self.viewToFitHeightScale = self.getViewFitToViewportScale(view, self.enableScaleUp);
				self.updateSliderValue(self.viewScale);
			}

			if (self.imageComparisonDuration!=null) {
				// todo
			}

			if (self.refreshPageForChangesInterval!=null) {
				self.refreshDuration = Number(self.refreshPageForChangesInterval);
			}
		}
	}

	self.previousView = function(event) {
		var rules = self.getStylesheetRules();
		var view = self.getVisibleView()
		var index = view ? self.getViewIndex(view) : -1;
		var prevQueryIndex = index!=-1 ? index-1 : self.currentQuery.index-1;
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;

		if (event) {
			event.stopImmediatePropagation();
		}

		if (prevQueryIndex<0) {
			return;
		}

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];
			
			if (rule.media!=null) {

				if (queryIndex==prevQueryIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = prevQueryIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
					self.updateViewLabel();
					self.updateURL();
					self.dispatchViewChange();
				}
				else {
					self.disableMediaQuery(rule);
				}

				queryIndex++;
			}
		}
	}

	self.nextView = function(event) {
		var rules = self.getStylesheetRules();
		var view = self.getVisibleView();
		var index = view ? self.getViewIndex(view) : -1;
		var nextQueryIndex = index!=-1 ? index+1 : self.currentQuery.index+1;
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;
		var numberOfMediaQueries = self.getNumberOfMediaRules();

		if (event) {
			event.stopImmediatePropagation();
		}

		if (nextQueryIndex>=numberOfMediaQueries) {
			return;
		}

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];
			
			if (rule.media!=null) {

				if (queryIndex==nextQueryIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = nextQueryIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
					self.updateViewLabel();
					self.updateURL();
					self.dispatchViewChange();
				}
				else {
					self.disableMediaQuery(rule);
				}

				queryIndex++;
			}
		}
	}

	/**
	 * Enables a view via media query
	 */
	self.enableMediaQuery = function(rule) {

		try {
			rule.media.mediaText = self.inclusionQuery;
		}
		catch(error) {
			//self.log(error);
			rule.conditionText = self.inclusionQuery;
		}
	}

	self.disableMediaQuery = function(rule) {

		try {
			rule.media.mediaText = self.exclusionQuery;
		}
		catch(error) {
			rule.conditionText = self.exclusionQuery;
		}
	}

	self.dispatchViewChange = function() {
		try {
			var event = new Event(self.NAVIGATION_CHANGE);
			window.dispatchEvent(event);
		}
		catch (error) {
			// In IE 11: Object doesn't support this action
		}
	}

	self.getNumberOfMediaRules = function() {
		var rules = self.getStylesheetRules();
		var numberOfRules = rules ? rules.length : 0;
		var numberOfQueries = 0;

		for (var i=0;i<numberOfRules;i++) {
			if (rules[i].media!=null) { numberOfQueries++; }
		}
		
		return numberOfQueries;
	}

	/////////////////////////////////////////
	// VIEW SCALE 
	/////////////////////////////////////////

	self.sliderChangeHandler = function(event) {
		var value = self.getShortNumber(event.currentTarget.value/100);
		var view = self.getVisibleView();
		self.setViewScaleValue(view, false, value, true);
	}

	self.updateSliderValue = function(scale) {
		var slider = document.getElementById(self.viewScaleSliderId);
		var tooltip = parseInt(scale * 100 + "") + "%";
		var inputType;
		var inputValue;
		
		if (slider) {
			inputValue = self.getShortNumber(scale * 100);
			if (inputValue!=slider["value"]) {
				slider["value"] = inputValue;
			}
			inputType = slider.getAttributeNS(null, "type");

			if (inputType!="range") {
				// input range is not supported
				slider.style.display = "none";
			}

			self.setTooltip(slider, tooltip);
		}
	}

	self.viewChangeHandler = function(event) {
		var view = self.getVisibleView();
		var matrix = view ? getComputedStyle(view).transform : null;
		
		if (matrix) {
			self.viewScale = self.getViewScaleValue(view);
			
			var scaleNeededToFit = self.getViewFitToViewportScale(view);
			var isViewLargerThanViewport = scaleNeededToFit<1;
			
			// scale large view to fit if scale to fit is enabled
			if (self.scaleViewsToFit) {
				self.scaleViewToFit(view);
			}
			else {
				self.updateSliderValue(self.viewScale);
			}
		}
	}

	self.getViewScaleValue = function(view) {
		var matrix = getComputedStyle(view).transform;

		if (matrix) {
			var matrixArray = matrix.replace("matrix(", "").split(",");
			var scaleX = parseFloat(matrixArray[0]);
			var scaleY = parseFloat(matrixArray[3]);
			var scale = Math.min(scaleX, scaleY);
		}

		return scale;
	}

	/**
	 * Scales view to scale. 
	 * @param {Object} view view to scale. views are in views array
	 * @param {Boolean} scaleToFit set to true to scale to fit. set false to use desired scale value
	 * @param {Number} desiredScale scale to define. not used if scale to fit is false
	 * @param {Boolean} isSliderChange indicates if slider is callee
	 */
	self.setViewScaleValue = function(view, scaleToFit, desiredScale, isSliderChange) {
		var enableScaleUp = self.enableScaleUp;
		var scaleToFitType = self.scaleToFitType;
		var minimumScale = self.minimumScale;
		var maximumScale = self.maximumScale;
		var hasMinimumScale = !isNaN(minimumScale) && minimumScale!="";
		var hasMaximumScale = !isNaN(maximumScale) && maximumScale!="";
		var scaleNeededToFit = self.getViewFitToViewportScale(view, enableScaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, enableScaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, enableScaleUp);
		var scaleToFitFull = self.getViewFitToViewportScale(view, true);
		var scaleToFitFullWidth = self.getViewFitToViewportWidthScale(view, true);
		var scaleToFitFullHeight = self.getViewFitToViewportHeightScale(view, true);
		var scaleToWidth = scaleToFitType=="width";
		var scaleToHeight = scaleToFitType=="height";
		var shrunkToFit = false;
		var topPosition = null;
		var leftPosition = null;
		var translateY = null;
		var translateX = null;
		var transformValue = "";
		var canCenterVertically = true;
		var canCenterHorizontally = true;
		var style = view.style;

		if (view && self.viewsDictionary[view.id] && self.viewsDictionary[view.id].styleDeclaration) {
			style = self.viewsDictionary[view.id].styleDeclaration.style;
		}

		if (scaleToFit && isSliderChange!=true) {
			if (scaleToFitType=="fit" || scaleToFitType=="") {
				desiredScale = scaleNeededToFit;
			}
			else if (scaleToFitType=="width") {
				desiredScale = scaleNeededToFitWidth;
			}
			else if (scaleToFitType=="height") {
				desiredScale = scaleNeededToFitHeight;
			}
		}
		else {
			if (isNaN(desiredScale)) {
				desiredScale = 1;
			}
		}

		self.updateSliderValue(desiredScale);
		
		// scale to fit width
		if (scaleToWidth && scaleToHeight==false) {
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			canCenterHorizontally = scaleNeededToFitWidth>=1 && enableScaleUp==false;

			if (isSliderChange) {
				canCenterHorizontally = desiredScale<scaleToFitFullWidth;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFitWidth;
			}

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
			}

			desiredScale = self.getShortNumber(desiredScale);

			canCenterHorizontally = self.canCenterHorizontally(view, "width", enableScaleUp, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "width", enableScaleUp, desiredScale, minimumScale, maximumScale);

			if (desiredScale>1 && (enableScaleUp || isSliderChange)) {
				transformValue = "scale(" + desiredScale + ")";
			}
			else if (desiredScale>=1 && enableScaleUp==false) {
				transformValue = "scale(" + 1 + ")";
			}
			else {
				transformValue = "scale(" + desiredScale + ")";
			}

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			return desiredScale;
		}

		// scale to fit height
		if (scaleToHeight && scaleToWidth==false) {
			//canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			//canCenterHorizontally = scaleNeededToFitHeight<=scaleNeededToFitWidth && enableScaleUp==false;
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			canCenterHorizontally = scaleNeededToFitWidth>=1 && enableScaleUp==false;
			
			if (isSliderChange) {
				canCenterHorizontally = desiredScale<scaleToFitFullHeight;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFitHeight;
			}

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
				//canCenterVertically = desiredScale>=scaleNeededToFitHeight && enableScaleUp==false;
			}

			desiredScale = self.getShortNumber(desiredScale);

			canCenterHorizontally = self.canCenterHorizontally(view, "height", enableScaleUp, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "height", enableScaleUp, desiredScale, minimumScale, maximumScale);

			if (desiredScale>1 && (enableScaleUp || isSliderChange)) {
				transformValue = "scale(" + desiredScale + ")";
			}
			else if (desiredScale>=1 && enableScaleUp==false) {
				transformValue = "scale(" + 1 + ")";
			}
			else {
				transformValue = "scale(" + desiredScale + ")";
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			return scaleNeededToFitHeight;
		}

		if (scaleToFitType=="fit") {
			//canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			//canCenterHorizontally = scaleNeededToFitWidth>=scaleNeededToFitHeight;
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFit;
			canCenterHorizontally = scaleNeededToFitWidth>=scaleNeededToFit;

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			desiredScale = self.getShortNumber(desiredScale);

			if (isSliderChange || scaleToFit==false) {
				canCenterVertically = scaleToFitFullHeight>=desiredScale;
				canCenterHorizontally = desiredScale<scaleToFitFullWidth;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFit;
			}

			transformValue = "scale(" + desiredScale + ")";

			//canCenterHorizontally = self.canCenterHorizontally(view, "fit", false, desiredScale);
			//canCenterVertically = self.canCenterVertically(view, "fit", false, desiredScale);
			
			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			self.updateSliderValue(desiredScale);
			
			return desiredScale;
		}

		if (scaleToFitType=="default" || scaleToFitType=="") {
			desiredScale = 1;

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}
			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
			}

			canCenterHorizontally = self.canCenterHorizontally(view, "none", false, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "none", false, desiredScale, minimumScale, maximumScale);

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
				else {
					transformValue += " translateX(" + 0 + ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;


			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			self.updateSliderValue(desiredScale);
			
			return desiredScale;
		}
	}

	/**
	 * Returns true if view can be centered horizontally
	 * @param {HTMLElement} view view
	 * @param {String} type type of scaling - width, height, all, none
	 * @param {Boolean} scaleUp if scale up enabled 
	 * @param {Number} scale target scale value 
	 */
	self.canCenterHorizontally = function(view, type, scaleUp, scale, minimumScale, maximumScale) {
		var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);
		var canCenter = false;
		var minScale;

		type = type==null ? "none" : type;
		scale = scale==null ? scale : scaleNeededToFitWidth;
		scaleUp = scaleUp == null ? false : scaleUp;

		if (type=="width") {
	
			if (scaleUp && maximumScale==null) {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=1) {
				canCenter = true;
			}
		}
		else if (type=="height") {
			minScale = Math.min(1, scaleNeededToFitHeight);
			if (minimumScale!="" && maximumScale!="") {
				minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));
			}
			else {
				if (minimumScale!="") {
					minScale = Math.max(minimumScale, scaleNeededToFitHeight);
				}
				if (maximumScale!="") {
					minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));
				}
			}
	
			if (scaleUp && maximumScale=="") {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=minScale) {
				canCenter = true;
			}
		}
		else if (type=="fit") {
			canCenter = scaleNeededToFitWidth>=scaleNeededToFit;
		}
		else {
			if (scaleUp) {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=1) {
				canCenter = true;
			}
		}

		self.horizontalScrollbarsNeeded = canCenter;
		
		return canCenter;
	}

	/**
	 * Returns true if view can be centered horizontally
	 * @param {HTMLElement} view view to scale
	 * @param {String} type type of scaling
	 * @param {Boolean} scaleUp if scale up enabled 
	 * @param {Number} scale target scale value 
	 */
	self.canCenterVertically = function(view, type, scaleUp, scale, minimumScale, maximumScale) {
		var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);
		var canCenter = false;
		var minScale;

		type = type==null ? "none" : type;
		scale = scale==null ? 1 : scale;
		scaleUp = scaleUp == null ? false : scaleUp;
	
		if (type=="width") {
			canCenter = scaleNeededToFitHeight>=scaleNeededToFitWidth;
		}
		else if (type=="height") {
			minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFit));
			canCenter = scaleNeededToFitHeight>=minScale;
		}
		else if (type=="fit") {
			canCenter = scaleNeededToFitHeight>=scaleNeededToFit;
		}
		else {
			if (scaleUp) {
				canCenter = false;
			}
			else if (scaleNeededToFitHeight>=1) {
				canCenter = true;
			}
		}

		self.verticalScrollbarsNeeded = canCenter;
		
		return canCenter;
	}

	self.getViewFitToViewportScale = function(view, scaleUp) {
		var enableScaleUp = scaleUp;
		var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		var elementWidth = parseFloat(getComputedStyle(view, "style").width);
		var elementHeight = parseFloat(getComputedStyle(view, "style").height);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementWidth) || isNaN(elementHeight)) {
			return newScale;
		}

		availableWidth -= self.horizontalPadding;
		availableHeight -= self.verticalPadding;

		if (enableScaleUp) {
			newScale = Math.min(availableHeight/elementHeight, availableWidth/elementWidth);
		}
		else if (elementWidth > availableWidth || elementHeight > availableHeight) {
			newScale = Math.min(availableHeight/elementHeight, availableWidth/elementWidth);
		}
		
		return newScale;
	}

	self.getViewFitToViewportWidthScale = function(view, scaleUp) {
		// need to get browser viewport width when element
		var isParentWindow = view && view.parentNode && view.parentNode===document.body;
		var enableScaleUp = scaleUp;
		var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		var elementWidth = parseFloat(getComputedStyle(view, "style").width);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementWidth)) {
			return newScale;
		}

		availableWidth -= self.horizontalPadding;

		if (enableScaleUp) {
			newScale = availableWidth/elementWidth;
		}
		else if (elementWidth > availableWidth) {
			newScale = availableWidth/elementWidth;
		}
		
		return newScale;
	}

	self.getViewFitToViewportHeightScale = function(view, scaleUp) {
		var enableScaleUp = scaleUp;
		var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		var elementHeight = parseFloat(getComputedStyle(view, "style").height);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementHeight)) {
			return newScale;
		}

		availableHeight -= self.verticalPadding;

		if (enableScaleUp) {
			newScale = availableHeight/elementHeight;
		}
		else if (elementHeight > availableHeight) {
			newScale = availableHeight/elementHeight;
		}
		
		return newScale;
	}

	self.keypressHandler = function(event) {
		var rightKey = 39;
		var leftKey = 37;
		
		// listen for both events 
		if (event.type=="keypress") {
			window.removeEventListener("keyup", self.keypressHandler);
		}
		else {
			window.removeEventListener("keypress", self.keypressHandler);
		}
		
		if (self.showNavigationControls) {
			if (self.navigationOnKeypress) {
				if (event.keyCode==rightKey) {
					self.nextView();
				}
				if (event.keyCode==leftKey) {
					self.previousView();
				}
			}
		}
		else if (self.navigationOnKeypress) {
			if (event.keyCode==rightKey) {
				self.nextView();
			}
			if (event.keyCode==leftKey) {
				self.previousView();
			}
		}
	}

	///////////////////////////////////
	// GENERAL FUNCTIONS
	///////////////////////////////////

	self.getViewById = function(id) {
		id = id ? id.replace("#", "") : "";
		var view = self.viewIds.indexOf(id)!=-1 && self.getElement(id);
		return view;
	}

	self.getViewIds = function() {
		var viewIds = self.getViewPreferenceValue(document.body, self.prefix + "view-ids");
		var viewId = null;

		viewIds = viewIds!=null && viewIds!="" ? viewIds.split(",") : [];

		if (viewIds.length==0) {
			viewId = self.getViewPreferenceValue(document.body, self.prefix + "view-id");
			viewIds = viewId ? [viewId] : [];
		}

		return viewIds;
	}

	self.getInitialViewId = function() {
		var viewId = self.getViewPreferenceValue(document.body, self.prefix + "view-id");
		return viewId;
	}

	self.getApplicationStylesheet = function() {
		var stylesheetId = self.getViewPreferenceValue(document.body, self.prefix + "stylesheet-id");
		self.applicationStylesheet = document.getElementById("applicationStylesheet");
		return self.applicationStylesheet.sheet;
	}

	self.getVisibleView = function() {
		var viewIds = self.getViewIds();
		
		for (var i=0;i<viewIds.length;i++) {
			var viewId = viewIds[i].replace(/[\#?\.?](.*)/, "$" + "1");
			var view = self.getElement(viewId);
			var postName = "_Class";

			if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
				view = self.getElement(viewId.replace(postName, ""));
			}
			
			if (view) {
				var display = getComputedStyle(view).display;
		
				if (display=="block" || display=="flex") {
					return view;
				}
			}
		}

		return null;
	}

	self.getVisibleViews = function() {
		var viewIds = self.getViewIds();
		var views = [];
		
		for (var i=0;i<viewIds.length;i++) {
			var viewId = viewIds[i].replace(/[\#?\.?](.*)/, "$" + "1");
			var view = self.getElement(viewId);
			var postName = "_Class";

			if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
				view = self.getElement(viewId.replace(postName, ""));
			}
			
			if (view) {
				var display = getComputedStyle(view).display;
				
				if (display=="none") {
					continue;
				}

				if (display=="block" || display=="flex") {
					views.push(view);
				}
			}
		}

		return views;
	}

	self.getStateNameByViewId = function(id) {
		var state = self.viewsDictionary[id];
		return state && state.stateName;
	}

	self.getMatchingViews = function(ids) {
		var views = self.addedViews.slice(0);
		var matchingViews = [];

		if (self.showByMediaQuery) {
			for (let index = 0; index < views.length; index++) {
				var viewId = views[index];
				var state = self.viewsDictionary[viewId];
				var rule = state && state.rule; 
				var matchResults = window.matchMedia(rule.conditionText);
				var view = self.views[viewId];
				
				if (matchResults.matches) {
					if (ids==true) {
						matchingViews.push(viewId);
					}
					else {
						matchingViews.push(view);
					}
				}
			}
		}

		return matchingViews;
	}

	self.ruleMatchesQuery = function(rule) {
		var result = window.matchMedia(rule.conditionText);
		return result.matches;
	}

	self.getViewsByStateName = function(stateName, matchQuery) {
		var views = self.addedViews.slice(0);
		var matchingViews = [];

		if (self.showByMediaQuery) {

			// find state name
			for (let index = 0; index < views.length; index++) {
				var viewId = views[index];
				var state = self.viewsDictionary[viewId];
				var rule = state.rule;
				var mediaRule = state.mediaRule;
				var view = self.views[viewId];
				var viewStateName = self.getStyleRuleValue(mediaRule, self.STATE_NAME, state);
				var stateFoundAtt = view.getAttribute(self.STATE_NAME)==state;
				var matchesResults = false;
				
				if (viewStateName==stateName) {
					if (matchQuery) {
						matchesResults = self.ruleMatchesQuery(rule);

						if (matchesResults) {
							matchingViews.push(view);
						}
					}
					else {
						matchingViews.push(view);
					}
				}
			}
		}

		return matchingViews;
	}

	self.getInitialView = function() {
		var viewId = self.getInitialViewId();
		viewId = viewId.replace(/[\#?\.?](.*)/, "$" + "1");
		var view = self.getElement(viewId);
		var postName = "_Class";

		if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
			view = self.getElement(viewId.replace(postName, ""));
		}

		return view;
	}

	self.getViewIndex = function(view) {
		var viewIds = self.getViewIds();
		var id = view ? view.id : null;
		var index = id && viewIds ? viewIds.indexOf(id) : -1;

		return index;
	}

	self.syncronizeViewToURL = function() {
		var fragment = self.getHashFragment();

		if (self.showByMediaQuery) {
			var stateName = fragment;
			
			if (stateName==null || stateName=="") {
				var initialView = self.getInitialView();
				stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
			}
			
			self.showMediaQueryViewsByState(stateName);
			return;
		}

		var view = self.getViewById(fragment);
		var index = view ? self.getViewIndex(view) : 0;
		if (index==-1) index = 0;
		var currentView = self.hideViews(index);

		if (self.supportsPopState && currentView) {

			if (fragment==null) {
				window.history.replaceState({name:currentView.id}, null, "#"+ currentView.id);
			}
			else {
				window.history.pushState({name:currentView.id}, null, "#"+ currentView.id);
			}
		}
		
		self.setViewVariables(view);
		return view;
	}

	/**
	 * Set the currentView or currentOverlay properties and set the lastView or lastOverlay properties
	 */
	self.setViewVariables = function(view, overlay, parentView) {
		if (view) {
			if (self.currentView) {
				self.lastView = self.currentView;
			}
			self.currentView = view;
		}

		if (overlay) {
			if (self.currentOverlay) {
				self.lastOverlay = self.currentOverlay;
			}
			self.currentOverlay = overlay;
		}
	}

	self.getViewPreferenceBoolean = function(view, property, altValue) {
		var computedStyle = window.getComputedStyle(view);
		var value = computedStyle.getPropertyValue(property);
		var type = typeof value;
		
		if (value=="true" || (type=="string" && value.indexOf("true")!=-1)) {
			return true;
		}
		else if (value=="" && arguments.length==3) {
			return altValue;
		}

		return false;
	}

	self.getViewPreferenceValue = function(view, property, defaultValue) {
		var value = window.getComputedStyle(view).getPropertyValue(property);

		if (value===undefined) {
			return defaultValue;
		}
		
		value = value.replace(/^[\s\"]*/, "");
		value = value.replace(/[\s\"]*$/, "");
		value = value.replace(/^[\s"]*(.*?)[\s"]*$/, function (match, capture) { 
			return capture;
		});

		return value;
	}

	self.getStyleRuleValue = function(cssRule, property) {
		var value = cssRule ? cssRule.style.getPropertyValue(property) : null;

		if (value===undefined) {
			return null;
		}
		
		value = value.replace(/^[\s\"]*/, "");
		value = value.replace(/[\s\"]*$/, "");
		value = value.replace(/^[\s"]*(.*?)[\s"]*$/, function (match, capture) { 
			return capture;
		});

		return value;
	}

	/**
	 * Get the first defined value of property. Returns empty string if not defined
	 * @param {String} id id of element
	 * @param {String} property 
	 */
	self.getCSSPropertyValueForElement = function(id, property) {
		var styleSheets = document.styleSheets;
		var numOfStylesheets = styleSheets.length;
		var values = [];
		var selectorIDText = "#" + id;
		var selectorClassText = "." + id + "_Class";
		var value;

		for(var i=0;i<numOfStylesheets;i++) {
			var styleSheet = styleSheets[i];
			var cssRules = self.getStylesheetRules(styleSheet);
			var numOfCSSRules = cssRules.length;
			var cssRule;
			
			for (var j=0;j<numOfCSSRules;j++) {
				cssRule = cssRules[j];
				
				if (cssRule.media) {
					var mediaRules = cssRule.cssRules;
					var numOfMediaRules = mediaRules ? mediaRules.length : 0;
					
					for(var k=0;k<numOfMediaRules;k++) {
						var mediaRule = mediaRules[k];
						
						if (mediaRule.selectorText==selectorIDText || mediaRule.selectorText==selectorClassText) {
							
							if (mediaRule.style && mediaRule.style.getPropertyValue(property)!="") {
								value = mediaRule.style.getPropertyValue(property);
								values.push(value);
							}
						}
					}
				}
				else {

					if (cssRule.selectorText==selectorIDText || cssRule.selectorText==selectorClassText) {
						if (cssRule.style && cssRule.style.getPropertyValue(property)!="") {
							value = cssRule.style.getPropertyValue(property);
							values.push(value);
						}
					}
				}
			}
		}

		return values.pop();
	}

	self.getIsStyleDefined = function(id, property) {
		var value = self.getCSSPropertyValueForElement(id, property);
		return value!==undefined && value!="";
	}

	self.collectViews = function() {
		var viewIds = self.getViewIds();

		for (let index = 0; index < viewIds.length; index++) {
			const id = viewIds[index];
			const view = self.getElement(id);
			self.views[id] = view;
		}
		
		self.viewIds = viewIds;
	}

	self.collectOverlays = function() {
		var viewIds = self.getViewIds();
		var ids = [];

		for (let index = 0; index < viewIds.length; index++) {
			const id = viewIds[index];
			const view = self.getViewById(id);
			const isOverlay = view && self.isOverlay(view);
			
			if (isOverlay) {
				ids.push(id);
				self.overlays[id] = view;
			}
		}
		
		self.overlayIds = ids;
	}

	self.collectMediaQueries = function() {
		var viewIds = self.getViewIds();
		var styleSheet = self.getApplicationStylesheet();
		var cssRules = self.getStylesheetRules(styleSheet);
		var numOfCSSRules = cssRules ? cssRules.length : 0;
		var cssRule;
		var id = viewIds.length ? viewIds[0]: ""; // single view
		var selectorIDText = "#" + id;
		var selectorClassText = "." + id + "_Class";
		var viewsNotFound = viewIds.slice();
		var viewsFound = [];
		var selectorText = null;
		var property = self.prefix + "view-id";
		var stateName = self.prefix + "state";
		var stateValue;
		
		for (var j=0;j<numOfCSSRules;j++) {
			cssRule = cssRules[j];
			
			if (cssRule.media) {
				var mediaRules = cssRule.cssRules;
				var numOfMediaRules = mediaRules ? mediaRules.length : 0;
				var mediaViewInfoFound = false;
				var mediaId = null;
				
				for(var k=0;k<numOfMediaRules;k++) {
					var mediaRule = mediaRules[k];

					selectorText = mediaRule.selectorText;
					
					if (selectorText==".mediaViewInfo" && mediaViewInfoFound==false) {

						mediaId = self.getStyleRuleValue(mediaRule, property);
						stateValue = self.getStyleRuleValue(mediaRule, stateName);

						selectorIDText = "#" + mediaId;
						selectorClassText = "." + mediaId + "_Class";
						
						// prevent duplicates from load and domcontentloaded events
						if (self.addedViews.indexOf(mediaId)==-1) {
							self.addView(mediaId, cssRule, mediaRule, stateValue);
						}

						viewsFound.push(mediaId);

						if (viewsNotFound.indexOf(mediaId)!=-1) {
							viewsNotFound.splice(viewsNotFound.indexOf(mediaId));
						}

						mediaViewInfoFound = true;
					}

					if (selectorIDText==selectorText || selectorClassText==selectorText) {
						var styleObject = self.viewsDictionary[mediaId];
						if (styleObject) {
							styleObject.styleDeclaration = mediaRule;
						}
						break;
					}
				}
			}
			else {
				selectorText = cssRule.selectorText;
				
				if (selectorText==null) continue;

				selectorText = selectorText.replace(/[#|\s|*]?/g, "");

				if (viewIds.indexOf(selectorText)!=-1) {
					self.addView(selectorText, cssRule, null, stateValue);

					if (viewsNotFound.indexOf(selectorText)!=-1) {
						viewsNotFound.splice(viewsNotFound.indexOf(selectorText));
					}

					break;
				}
			}
		}

		if (viewsNotFound.length) {
			console.log("Could not find the following views:" + viewsNotFound.join(",") + "");
			console.log("Views found:" + viewsFound.join(",") + "");
		}
	}

	/**
	 * Adds a view. A view object contains the id of the view and the style rule
	 * Use enableMediaQuery(rule) to enable
	 * An array of view names are in self.addedViews array
	 */
	self.addView = function(viewId, cssRule, mediaRule, stateName) {
		var state = {name:viewId, rule:cssRule, id:viewId, mediaRule:mediaRule, stateName:stateName};
		self.addedViews.push(viewId);
		self.viewsDictionary[viewId] = state;
		self.mediaQueryDictionary[viewId] = cssRule;
	}

	self.hasView = function(name) {

		if (self.addedViews.indexOf(name)!=-1) {
			return true;
		}
		return false;
	}

	/**
	 * Go to view by id. Views are added in addView()
	 * @param {String} id id of view in current
	 * @param {Boolean} maintainPreviousState if true then do not hide other views
	 * @param {String} parent id of parent view
	 */
	self.goToView = function(id, maintainPreviousState, parent) {
		var state = self.viewsDictionary[id];

		if (state) {
			if (maintainPreviousState==false || maintainPreviousState==null) {
				self.hideViews();
			}
			self.enableMediaQuery(state.rule);
			self.updateViewLabel();
			self.updateURL();
		}
		else {
			var event = new Event(self.STATE_NOT_FOUND);
			self.stateName = id;
			window.dispatchEvent(event);
		}
	}

	/**
	 * Go to the view in the event targets CSS variable
	 */
	self.goToTargetView = function(event) {
		var button = event.currentTarget;
		var buttonComputedStyles = getComputedStyle(button);
		var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix+"action-target").trim();
		var animation = buttonComputedStyles.getPropertyValue(self.prefix+"animation").trim();
		var targetType = buttonComputedStyles.getPropertyValue(self.prefix+"action-type").trim();
		var targetView = self.application ? null : self.getElement(actionTargetValue);
		var targetState = targetView ? self.getStateNameByViewId(targetView.id) : null;
		var actionTargetStyles = targetView ? targetView.style : null;
		var state = self.viewsDictionary[actionTargetValue];
		
		// navigate to page
		if (self.application==false || targetType=="page") {
			document.location.href = "./" + actionTargetValue;
			return;
		}

		// if view is found
		if (targetView) {

			if (self.currentOverlay) {
				self.removeOverlay(false);
			}

			if (self.showByMediaQuery) {
				var stateName = targetState;
				
				if (stateName==null || stateName=="") {
					var initialView = self.getInitialView();
					stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
				}
				self.showMediaQueryViewsByState(stateName, event);
				return;
			}

			// add animation set in event target style declaration
			if (animation && self.supportAnimations) {
				self.crossFade(self.currentView, targetView, false, animation);
			}
			else {
				self.setViewVariables(self.currentView);
				self.hideViews();
				self.enableMediaQuery(state.rule);
				self.scaleViewIfNeeded(targetView);
				self.centerView(targetView);
				self.updateViewLabel();
				self.updateURL();
			}
		}
		else {
			var stateEvent = new Event(self.STATE_NOT_FOUND);
			self.stateName = name;
			window.dispatchEvent(stateEvent);
		}

		event.stopImmediatePropagation();
	}

	/**
	 * Cross fade between views
	 **/
	self.crossFade = function(from, to, update, animation) {
		var targetIndex = to.parentNode
		var fromIndex = Array.prototype.slice.call(from.parentElement.children).indexOf(from);
		var toIndex = Array.prototype.slice.call(to.parentElement.children).indexOf(to);

		if (from.parentNode==to.parentNode) {
			var reverse = self.getReverseAnimation(animation);
			var duration = self.getAnimationDuration(animation, true);

			// if target view is above (higher index)
			// then fade in target view 
			// and after fade in then hide previous view instantly
			if (fromIndex<toIndex) {
				self.setElementAnimation(from, null);
				self.setElementAnimation(to, null);
				self.showViewByMediaQuery(to);
				self.fadeIn(to, update, animation);

				setTimeout(function() {
					self.setElementAnimation(to, null);
					self.setElementAnimation(from, null);
					self.hideView(from);
					self.updateURL();
					self.setViewVariables(to);
					self.updateViewLabel();
				}, duration)
			}
			// if target view is on bottom
			// then show target view instantly 
			// and fade out current view
			else if (fromIndex>toIndex) {
				self.setElementAnimation(to, null);
				self.setElementAnimation(from, null);
				self.showViewByMediaQuery(to);
				self.fadeOut(from, update, reverse);

				setTimeout(function() {
					self.setElementAnimation(to, null);
					self.setElementAnimation(from, null);
					self.hideView(from);
					self.updateURL();
					self.setViewVariables(to);
				}, duration)
			}
		}
	}

	self.fadeIn = function(element, update, animation) {
		self.showViewByMediaQuery(element);

		if (update) {
			self.updateURL(element);

			element.addEventListener("animationend", function(event) {
				element.style.animation = null;
				self.setViewVariables(element);
				self.updateViewLabel();
				element.removeEventListener("animationend", arguments.callee);
			});
		}

		self.setElementAnimation(element, null);
		
		element.style.animation = animation;
	}

	self.fadeOutCurrentView = function(animation, update) {
		if (self.currentView) {
			self.fadeOut(self.currentView, update, animation);
		}
		if (self.currentOverlay) {
			self.fadeOut(self.currentOverlay, update, animation);
		}
	}

	self.fadeOut = function(element, update, animation) {
		if (update) {
			element.addEventListener("animationend", function(event) {
				element.style.animation = null;
				self.hideView(element);
				element.removeEventListener("animationend", arguments.callee);
			});
		}

		element.style.animationPlayState = "paused";
		element.style.animation = animation;
		element.style.animationPlayState = "running";
	}

	self.getReverseAnimation = function(animation) {
		if (animation && animation.indexOf("reverse")==-1) {
			animation += " reverse";
		}

		return animation;
	}

	/**
	 * Get duration in animation string
	 * @param {String} animation animation value
	 * @param {Boolean} inMilliseconds length in milliseconds if true
	 */
	self.getAnimationDuration = function(animation, inMilliseconds) {
		var duration = 0;
		var expression = /.+(\d\.\d)s.+/;

		if (animation && animation.match(expression)) {
			duration = parseFloat(animation.replace(expression, "$" + "1"));
			if (duration && inMilliseconds) duration = duration * 1000;
		}

		return duration;
	}

	self.setElementAnimation = function(element, animation, priority) {
		element.style.setProperty("animation", animation, "important");
	}

	self.getElement = function(id) {
		var elementId = id ? id.trim() : id;
		var element = elementId ? document.getElementById(elementId) : null;

		return element;
	}

	self.getElementByClass = function(className) {
		className = className ? className.trim() : className;
		var elements = document.getElementsByClassName(className);

		return elements.length ? elements[0] : null;
	}

	self.resizeHandler = function(event) {
		
		if (self.showByMediaQuery) {
			if (self.enableDeepLinking) {
				var stateName = self.getHashFragment();

				if (stateName==null || stateName=="") {
					var initialView = self.getInitialView();
					stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
				}
				self.showMediaQueryViewsByState(stateName, event);
			}
		}
		else {
			var visibleViews = self.getVisibleViews();

			for (let index = 0; index < visibleViews.length; index++) {	
				var view = visibleViews[index];
				self.scaleViewIfNeeded(view);
			}
		}

		window.dispatchEvent(new Event(self.APPLICATION_RESIZE));
	}

	self.scaleViewIfNeeded = function(view) {

		if (self.scaleViewsOnResize) {
			if (view==null) {
				view = self.getVisibleView();
			}

			var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME)=="false" ? false : true;

			if (isViewScaled) {
				self.scaleViewToFit(view, true);
			}
			else {
				self.scaleViewToActualSize(view);
			}
		}
		else if (view) {
			self.centerView(view);
		}
	}

	self.centerView = function(view) {

		if (self.scaleViewsToFit) {
			self.scaleViewToFit(view, true);
		}
		else {
			self.scaleViewToActualSize(view);  // for centering support for now
		}
	}

	self.preventDoubleClick = function(event) {
		event.stopImmediatePropagation();
	}

	self.getHashFragment = function() {
		var value = window.location.hash ? window.location.hash.replace("#", "") : "";
		return value;
	}

	self.showBlockElement = function(view) {
		view.style.display = "block";
	}

	self.hideElement = function(view) {
		view.style.display = "none";
	}

	self.showStateFunction = null;

	self.showMediaQueryViewsByState = function(state, event) {
		// browser will hide and show by media query (small, medium, large)
		// but if multiple views exists at same size user may want specific view
		// if showStateFunction is defined that is called with state fragment and user can show or hide each media matching view by returning true or false
		// if showStateFunction is not defined and state is defined and view has a defined state that matches then show that and hide other matching views
		// if no state is defined show view 
		// an viewChanging event is dispatched before views are shown or hidden that can be prevented 

		// get all matched queries
		// if state name is specified then show that view and hide other views
		// if no state name is defined then show
		var matchedViews = self.getMatchingViews();
		var matchMediaQuery = true;
		var foundViews = self.getViewsByStateName(state, matchMediaQuery);
		var showViews = [];
		var hideViews = [];

		// loop views that match media query 
		for (let index = 0; index < matchedViews.length; index++) {
			var view = matchedViews[index];
			
			// let user determine visible view
			if (self.showStateFunction!=null) {
				if (self.showStateFunction(view, state)) {
					showViews.push(view);
				}
				else {
					hideViews.push(view);
				}
			}
			// state was defined so check if view matches state
			else if (foundViews.length) {

				if (foundViews.indexOf(view)!=-1) {
					showViews.push(view);
				}
				else {
					hideViews.push(view);
				}
			}
			// if no state names are defined show view (define unused state name to exclude)
			else if (state==null || state=="") {
				showViews.push(view);
			}
		}

		if (showViews.length) {
			var viewChangingEvent = new Event(self.VIEW_CHANGING);
			viewChangingEvent.showViews = showViews;
			viewChangingEvent.hideViews = hideViews;
			window.dispatchEvent(viewChangingEvent);

			if (viewChangingEvent.defaultPrevented==false) {
				for (var index = 0; index < hideViews.length; index++) {
					var view = hideViews[index];

					if (self.isOverlay(view)) {
						self.removeOverlay(view);
					}
					else {
						self.hideElement(view);
					}
				}

				for (var index = 0; index < showViews.length; index++) {
					var view = showViews[index];

					if (index==showViews.length-1) {
						self.clearDisplay(view);
						self.setViewOptions(view);
						self.setViewVariables(view);
						self.centerView(view);
						self.updateURLState(view, state);
					}
				}
			}

			var viewChangeEvent = new Event(self.VIEW_CHANGE);
			viewChangeEvent.showViews = showViews;
			viewChangeEvent.hideViews = hideViews;
			window.dispatchEvent(viewChangeEvent);
		}
		
	}

	self.clearDisplay = function(view) {
		view.style.setProperty("display", null);
	}

	self.hashChangeHandler = function(event) {
		var fragment = self.getHashFragment();
		var view = self.getViewById(fragment);

		if (self.showByMediaQuery) {
			var stateName = fragment;

			if (stateName==null || stateName=="") {
				var initialView = self.getInitialView();
				stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
			}
			self.showMediaQueryViewsByState(stateName);
		}
		else {
			if (view) {
				self.hideViews();
				self.showView(view);
				self.setViewVariables(view);
				self.updateViewLabel();
				
				window.dispatchEvent(new Event(self.VIEW_CHANGE));
			}
			else {
				window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));
			}
		}
	}

	self.popStateHandler = function(event) {
		var state = event.state;
		var fragment = state ? state.name : window.location.hash;
		var view = self.getViewById(fragment);

		if (view) {
			self.hideViews();
			self.showView(view);
			self.updateViewLabel();
		}
		else {
			window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));
		}
	}

	self.doubleClickHandler = function(event) {
		var view = self.getVisibleView();
		var scaleValue = view ? self.getViewScaleValue(view) : 1;
		var scaleNeededToFit = view ? self.getViewFitToViewportScale(view) : 1;
		var scaleNeededToFitWidth = view ? self.getViewFitToViewportWidthScale(view) : 1;
		var scaleNeededToFitHeight = view ? self.getViewFitToViewportHeightScale(view) : 1;
		var scaleToFitType = self.scaleToFitType;

		// Three scenarios
		// - scale to fit on double click
		// - set scale to actual size on double click
		// - switch between scale to fit and actual page size

		if (scaleToFitType=="width") {
			scaleNeededToFit = scaleNeededToFitWidth;
		}
		else if (scaleToFitType=="height") {
			scaleNeededToFit = scaleNeededToFitHeight;
		}

		// if scale and actual size enabled then switch between
		if (self.scaleToFitOnDoubleClick && self.actualSizeOnDoubleClick) {
			var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);
			var isScaled = false;
			
			// if scale is not 1 then view needs scaling
			if (scaleNeededToFit!=1) {

				// if current scale is at 1 it is at actual size
				// scale it to fit
				if (scaleValue==1) {
					self.scaleViewToFit(view);
					isScaled = true;
				}
				else {
					// scale is not at 1 so switch to actual size
					self.scaleViewToActualSize(view);
					isScaled = false;
				}
			}
			else {
				// view is smaller than viewport 
				// so scale to fit() is scale actual size
				// actual size and scaled size are the same
				// but call scale to fit to retain centering
				self.scaleViewToFit(view);
				isScaled = false;
			}
			
			view.setAttributeNS(null, self.SIZE_STATE_NAME, isScaled+"");
			isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);
		}
		else if (self.scaleToFitOnDoubleClick) {
			self.scaleViewToFit(view);
		}
		else if (self.actualSizeOnDoubleClick) {
			self.scaleViewToActualSize(view);
		}

	}

	self.scaleViewToFit = function(view) {
		return self.setViewScaleValue(view, true);
	}

	self.scaleViewToActualSize = function(view) {
		self.setViewScaleValue(view, false, 1);
	}

	self.onloadHandler = function(event) {
		self.initialize();
	}

	self.setElementHTML = function(id, value) {
		var element = self.getElement(id);
		element.innerHTML = value;
	}

	self.getStackArray = function(error) {
		var value = "";
		
		if (error==null) {
		  try {
			 error = new Error("Stack");
		  }
		  catch (e) {
			 
		  }
		}
		
		if ("stack" in error) {
		  value = error.stack;
		  var methods = value.split(/\n/g);
	 
		  var newArray = methods ? methods.map(function (value, index, array) {
			 value = value.replace(/\@.*/,"");
			 return value;
		  }) : null;
	 
		  if (newArray && newArray[0].includes("getStackTrace")) {
			 newArray.shift();
		  }
		  if (newArray && newArray[0].includes("getStackArray")) {
			 newArray.shift();
		  }
		  if (newArray && newArray[0]=="") {
			 newArray.shift();
		  }
	 
			return newArray;
		}
		
		return null;
	}

	self.log = function(value) {
		console.log.apply(this, [value]);
	}
	
	// initialize on load
	// sometimes the body size is 0 so we call this now and again later
	window.addEventListener("load", self.onloadHandler);
	window.document.addEventListener("DOMContentLoaded", self.onloadHandler);
}

window.application = new Application();
</script>
</head>
<body>
<div id="">
	<div id="Achievements">
		<span>Achievements</span>
	</div>
	<div id="_2307">
		<div id="_2308">
			<div id="_2285">
				<svg class="_700">
					<rect id="_700" rx="10" ry="10" x="0" y="0" width="176.306" height="247.431">
					</rect>
				</svg>
				<svg class="_714">
					<rect id="_714" rx="0" ry="0" x="0" y="0" width="176.306" height="0.902">
					</rect>
				</svg>
			</div>
			<div id="_2306">
				<svg class="_715">
					<rect id="_715" rx="16" ry="16" x="0" y="0" width="36.019" height="36.019">
					</rect>
				</svg>
				<div id="medal">
					<svg class="_1456" viewBox="0 0 14.094 11.889">
						<path id="_1456" d="M 10.00258922576904 0.3835012316703796 C 9.807909965515137 0.1408836990594864 9.514159202575684 0 9.203625679016113 0 L 1.022263646125793 0 C 0.6289084553718567 0 0.2712417244911194 0.2258396148681641 0.1005307734012604 0.5792464017868042 C -0.06938181817531586 0.9337188005447388 -0.02250942960381508 1.354239106178284 0.2233043909072876 1.661837816238403 L 8.404665946960449 11.88853645324707 L 14.09327030181885 5.49685001373291 L 10.00258922576904 0.3835012316703796 Z M 10.00258922576904 0.3835012316703796">
						</path>
					</svg>
					<svg class="_1457" viewBox="123.301 0 21.244 11.289">
						<path id="_1457" d="M 144.2867279052734 1.662421107292175 L 135.3233489990234 11.28875827789307 L 129.0132141113281 11.28875827789307 L 123.3006134033203 10.652419090271 L 126.100456237793 7.644552230834961 L 129.0132141113281 4.515383243560791 L 132.8615264892578 0.389725387096405 C 133.0765838623047 0.143580824136734 133.4351196289062 -0.0002036094665527344 133.7936553955078 -0.0002036094665527344 L 143.3545837402344 -0.0002036094665527344 C 143.8086700439453 -0.0002036094665527344 144.2390747070312 0.2256290167570114 144.43017578125 0.5746672749519348 C 144.62158203125 0.9440175294876099 144.5736541748047 1.354522585868835 144.2867279052734 1.662403225898743 Z M 144.2867279052734 1.662421107292175">
						</path>
					</svg>
					<svg class="_1458" viewBox="195 0 13.291 11.249">
						<path id="_1458" d="M 208.0695037841797 1.656575918197632 L 200.3994598388672 11.2491512298584 L 194.9998016357422 11.2491512298584 L 194.9998016357422 4.49953031539917 L 198.2928466796875 0.388342559337616 C 198.4768981933594 0.1430612951517105 198.7837066650391 -0.0002188682556152344 199.0904998779297 -0.0002188682556152344 L 207.2718658447266 -0.0002188682556152344 C 207.6604309082031 -0.0002188682556152344 208.0287475585938 0.2248216718435287 208.1922760009766 0.5726357698440552 C 208.3560485839844 0.9406904578208923 208.3150482177734 1.349755883216858 208.0695037841797 1.656556844711304 Z M 208.0695037841797 1.656575918197632">
						</path>
					</svg>
					<svg class="_1459" viewBox="150 150 6.136 6.136">
						<path id="_1459" d="M 153.0680236816406 150.0000152587891 C 151.3702392578125 150.0000152587891 150.0000152587891 151.3702392578125 150.0000152587891 153.0680236816406 C 150.0000152587891 154.7658081054688 151.3702392578125 156.1360321044922 153.0680236816406 156.1360321044922 C 154.7658233642578 156.1360321044922 156.1360321044922 154.7658081054688 156.1360321044922 153.0680236816406 C 156.1360321044922 151.3702392578125 154.7655487060547 150.0000152587891 153.0680236816406 150.0000152587891 Z M 153.0680236816406 150.0000152587891">
						</path>
					</svg>
					<svg class="_1460" viewBox="195 150 3.068 6.136">
						<path id="_1460" d="M 195.0000152587891 156.1360321044922 L 195.0000152587891 150.0000152587891 C 196.6977844238281 150.0000152587891 198.0680236816406 151.3702392578125 198.0680236816406 153.0680236816406 C 198.0680236816406 154.7658081054688 196.6975402832031 156.1360321044922 195.0000152587891 156.1360321044922 Z M 195.0000152587891 156.1360321044922">
						</path>
					</svg>
					<svg class="_1461" viewBox="45 210 19.714 20.59">
						<path id="_1461" d="M 54.85713958740234 209.9999847412109 C 49.41594696044922 209.9999847412109 45.00000762939453 214.6496734619141 45.00000762939453 220.2948608398438 C 45.00000762939453 225.9400634765625 49.41594696044922 230.5897369384766 54.85713958740234 230.5897369384766 C 60.29832458496094 230.5897369384766 64.71427154541016 225.9400634765625 64.71427154541016 220.2948608398438 C 64.71427154541016 214.6496734619141 60.29832458496094 209.9999847412109 54.85713958740234 209.9999847412109 Z M 54.85713958740234 209.9999847412109">
						</path>
					</svg>
					<svg class="_1462" viewBox="195 210 10.227 20.59">
						<path id="_1462" d="M 205.2267303466797 220.2948608398438 C 205.2267303466797 225.9400634765625 200.6452026367188 230.5897369384766 195.0000152587891 230.5897369384766 L 195.0000152587891 209.9999847412109 C 200.6452026367188 209.9999847412109 205.2267303466797 214.6496734619141 205.2267303466797 220.2948608398438 Z M 205.2267303466797 220.2948608398438">
						</path>
					</svg>
					<svg class="_1463" viewBox="75 240 15.624 16.499">
						<path id="_1463" d="M 90.62358093261719 248.2495269775391 C 90.62358093261719 252.769775390625 87.12785339355469 256.4990539550781 82.81179046630859 256.4990539550781 C 78.4957275390625 256.4990539550781 75.00000762939453 252.7698059082031 75.00000762939453 248.2495269775391 C 75.00000762939453 243.7292785644531 78.49573516845703 240.0000152587891 82.81179046630859 240.0000152587891 C 87.12785339355469 240.0000152587891 90.62358093261719 243.7292785644531 90.62358093261719 248.2495269775391 Z M 90.62358093261719 248.2495269775391">
						</path>
					</svg>
					<svg class="_1464" viewBox="195 240 8.181 16.499">
						<path id="_1464" d="M 203.1813812255859 248.2495269775391 C 203.1813812255859 252.769775390625 199.520263671875 256.4990539550781 195.0000152587891 256.4990539550781 L 195.0000152587891 240.0000152587891 C 199.520263671875 240.0000152587891 203.1813812255859 243.7292785644531 203.1813812255859 248.2495269775391 Z M 203.1813812255859 248.2495269775391">
						</path>
					</svg>
					<svg class="_1465" viewBox="105.151 275.801 14.501 11.747">
						<path id="_1465" d="M 119.5920181274414 280.1570434570312 C 119.4470367431641 279.7890014648438 119.0596008300781 279.5024108886719 118.5996780395508 279.461669921875 L 115.0650405883789 279.0115966796875 L 113.4914245605469 276.3119201660156 C 113.2736206054688 275.964111328125 112.8376541137695 275.8005981445312 112.4020156860352 275.8005981445312 C 111.9663619995117 275.8005981445312 111.5304183959961 275.964111328125 111.3125915527344 276.3119201660156 L 109.7389755249023 279.0115966796875 L 106.2043380737305 279.461669921875 C 105.7444152832031 279.5024108886719 105.3573303222656 279.7890014648438 105.2119979858398 280.1570434570312 C 105.0663757324219 280.5250854492188 105.1877288818359 280.9341735839844 105.5266036987305 281.2002563476562 L 108.0925521850586 283.3067932128906 L 107.4873199462891 286.3407287597656 C 107.4148101806641 286.729248046875 107.5843963623047 287.1178588867188 107.9715042114258 287.3432006835938 C 108.3349609375 287.5884704589844 108.8431091308594 287.6089782714844 109.2305221557617 287.4249572753906 L 112.4020385742188 286.013427734375 L 115.5735321044922 287.4249572753906 C 115.9606170654297 287.6089782714844 116.4690704345703 287.5884704589844 116.8325347900391 287.3432006835938 C 117.2196426391602 287.1181030273438 117.3892288208008 286.729248046875 117.3167114257812 286.3407287597656 L 116.7114868164062 283.3067932128906 L 119.2774353027344 281.2002563476562 C 119.6163177490234 280.9341735839844 119.7376708984375 280.5250854492188 119.5920181274414 280.1570434570312 Z M 119.5920181274414 280.1570434570312">
						</path>
					</svg>
					<svg class="_1466" viewBox="195 275.801 7.251 11.747">
						<path id="_1466" d="M 201.8751678466797 281.2002258300781 L 199.3088836669922 283.3070678710938 L 199.9141235351562 286.3409423828125 C 199.9869384765625 286.7291870117188 199.8173675537109 287.1180419921875 199.4299468994141 287.3431091308594 C 199.0668029785156 287.5884094238281 198.5583038330078 287.60888671875 198.1712341308594 287.4248657226562 L 194.9997253417969 286.0136108398438 L 194.9997253417969 275.800537109375 C 195.4353485107422 275.800537109375 195.871337890625 275.9640502929688 196.0891418457031 276.3118591308594 L 197.6627502441406 279.0115661621094 L 201.1973876953125 279.4616394042969 C 201.6573181152344 279.5023803710938 202.04443359375 279.7889099121094 202.1897583007812 280.156982421875 C 202.3353729248047 280.5250244140625 202.2140502929688 280.9341125488281 201.8751678466797 281.2001953125 Z M 201.8751678466797 281.2002258300781">
						</path>
					</svg>
					<svg class="_1467" viewBox="60 150 17.669 4.091">
						<path id="_1467" d="M 77.37481689453125 153.7838897705078 C 77.19817352294922 153.9884338378906 76.94280242919922 154.0906982421875 76.68767547607422 154.0906982421875 C 76.43257141113281 154.0906982421875 76.17720031738281 153.9884338378906 76.00056457519531 153.7838897705078 L 74.31214904785156 152.0453491210938 L 63.3575439453125 152.0453491210938 L 61.66913604736328 153.7838897705078 C 61.29617309570312 154.1929626464844 60.66809844970703 154.1929626464844 60.29488372802734 153.7838897705078 C 59.90223693847656 153.3953247070312 59.90223693847656 152.7407073974609 60.29488372802734 152.3521423339844 L 62.25809478759766 150.3068237304688 C 62.43473052978516 150.1022796630859 62.69010162353516 150.0000152587891 62.94522094726562 150.0000152587891 L 74.72449493408203 150.0000152587891 C 74.97960662841797 150.0000152587891 75.2349853515625 150.1022796630859 75.41162109375 150.3068237304688 L 77.37482452392578 152.3521423339844 C 77.76747131347656 152.7407073974609 77.76747131347656 153.3953247070312 77.37482452392578 153.7838897705078 Z M 77.37481689453125 153.7838897705078">
						</path>
					</svg>
					<svg class="_1468" viewBox="195 150 9.204 4.091">
						<path id="_1468" d="M 203.8972320556641 153.7838897705078 C 203.7132110595703 153.9884338378906 203.4471435546875 154.0906982421875 203.1813507080078 154.0906982421875 C 202.9155883789062 154.0906982421875 202.6495361328125 153.9884338378906 202.4654998779297 153.7838897705078 L 200.7064514160156 152.0453491210938 L 195 152.0453491210938 L 195 150.0000152587891 L 201.1360473632812 150.0000152587891 C 201.4018096923828 150.0000152587891 201.6678771972656 150.1022796630859 201.8518981933594 150.3068237304688 L 203.8972320556641 152.3521423339844 C 204.3062896728516 152.7407073974609 204.3062896728516 153.3953247070312 203.8972320556641 153.7838897705078 Z M 203.8972320556641 153.7838897705078">
						</path>
					</svg>
				</div>
			</div>
		</div>
		<div id="_2301">
			<div id="_2284">
				<div id="speedometer">
					<div id="Gauge">
						<div id="_2283">
							<svg class="_1455" viewBox="41.141 19.533 77.499 76.131">
								<path id="_1455" d="M 45.58087158203125 19.53299903869629 C 43.1274299621582 19.53299903869629 41.14099884033203 21.48440361022949 41.14099884033203 23.89113426208496 C 41.14099884033203 26.29787063598633 43.1274299621582 28.25094223022461 45.58087158203125 28.25094223022461 C 80.96970367431641 28.25094223022461 109.7537841796875 56.53964996337891 109.7537841796875 91.30635070800781 C 109.7537841796875 93.71142578125 111.7468795776367 95.66448974609375 114.1969909667969 95.66448974609375 C 116.6537475585938 95.66448974609375 118.6401901245117 93.71142578125 118.6401901245117 91.30635070800781 C 118.6368560791016 51.72451400756836 85.86489105224609 19.53299903869629 45.58087158203125 19.53299903869629 Z">
								</path>
							</svg>
						</div>
					</div>
				</div>
				<div id="speedometer_bg">
					<div id="Gauge_bh">
						<div id="_2283_bi">
							<svg class="_1455_bj" viewBox="41.141 19.533 77.5 76.131">
								<path id="_1455_bj" d="M 114.2006530761719 19.53299713134766 C 116.6540908813477 19.53299713134766 118.6405334472656 21.48439598083496 118.6405334472656 23.8911190032959 C 118.6405334472656 26.29784774780273 116.6540908813477 28.25091552734375 114.2006530761719 28.25091552734375 C 78.81165313720703 28.25091552734375 50.02744674682617 56.53953552246094 50.02744674682617 91.30613708496094 C 50.02744674682617 93.71120452880859 48.03433609008789 95.66425323486328 45.58422088623047 95.66425323486328 C 43.12744522094727 95.66425323486328 41.14099884033203 93.71120452880859 41.14099884033203 91.30613708496094 C 41.14434432983398 51.72441101074219 73.91643524169922 19.53299713134766 114.2006530761719 19.53299713134766 Z">
								</path>
							</svg>
						</div>
					</div>
				</div>
			</div>
			<div id="ID50">
				<span>50%</span>
			</div>
			<div id="Finished">
				<span>Finished</span>
			</div>
			<div id="Medal_for_illustration">
				<span>Medal for illustration</span>
			</div>
			<div id="Winner">
				<span>Winner</span>
			</div>
		</div>
	</div>
	<div id="_2079">
		<img id="ID6" src="./views/mypage/ID6.png" srcset="./views/mypage/ID6.png 1x, ./views/mypage/ID6@2x.png 2x">
			
		<svg class="_193">
			<ellipse id="_193" rx="13.164731979370117" ry="13.164727210998535" cx="13.164731979370117" cy="13.164727210998535">
			</ellipse>
		</svg>
		<svg class="_1473" viewBox="235.65 328.15 12.204 7.739">
			<path id="_1473" d="M 239.1474609375 335.8891906738281 C 239.0093078613281 335.8891906738281 238.8767547607422 335.8342590332031 238.7790832519531 335.7365112304688 L 235.802490234375 332.7599487304688 C 235.5990600585938 332.5565490722656 235.5990600585938 332.2266235351562 235.802490234375 332.0231018066406 C 236.0059661865234 331.8196411132812 236.3358917236328 331.8196411132812 236.5393981933594 332.0231018066406 L 239.1824035644531 334.6661376953125 C 239.1824035644531 334.6661376953125 240.0513305664062 333.9552307128906 242.0065155029297 332.3555908203125 C 242.7103881835938 331.7797241210938 243.5550231933594 331.0886840820312 244.5906524658203 330.2413635253906 C 245.7573547363281 329.2868041992188 247.0031127929688 328.267578125 247.0031127929688 328.267578125 C 247.2258453369141 328.0853271484375 247.5541534423828 328.1181640625 247.7363739013672 328.3409729003906 C 247.9185943603516 328.5636596679688 247.8857116699219 328.8919982910156 247.6629486083984 329.0741577148438 L 246.1309051513672 330.3276672363281 L 239.4774322509766 335.7714538574219 C 239.3842620849609 335.8473815917969 239.2677307128906 335.8890075683594 239.1474609375 335.8891906738281 Z">
			</path>
		</svg>
	</div>
	<div id="_">
		<span>진도 현황</span>
	</div>
	<div id="_2310">
		<svg class="_721">
			<rect id="_721" rx="10" ry="10" x="0" y="0" width="616.693" height="115.404">
			</rect>
		</svg>
		<svg class="_706">
			<rect id="_706" rx="10" ry="10" x="0" y="0" width="616.693" height="115.404">
			</rect>
		</svg>
		<img id="daniel-bystedt-rob-1" src="./views/mypage/daniel-bystedt-rob-1.png" srcset="./views/mypage/daniel-bystedt-rob-1.png 1x, ./views/mypage/daniel-bystedt-rob-1@2x.png 2x">
			
		<div id="_2282">
			<div id="Blender_28">
				<span>Blender 2.8</span>
			</div>
			<div id="All_time">
				<span>All time</span>
			</div>
		</div>
		<div id="_2281">
			<div id="Adobe_Illustrator">
				<span>Adobe Illustrator</span>
			</div>
			<div id="All_time_b">
				<span>All time</span>
			</div>
		</div>
		<svg class="_707">
			<rect id="_707" rx="16" ry="16" x="0" y="0" width="48.579" height="48.579">
			</rect>
		</svg>
		<svg class="_5" viewBox="0 0 15.457 13.249">
			<path id="_5" d="M 6.00089168548584 2.961528778076172 C 6.772647857666016 1.638517737388611 8.684250831604004 1.638517737388611 9.45600700378418 2.961528539657593 L 13.70238399505615 10.24103355407715 C 14.480149269104 11.5743465423584 13.51840686798096 13.24877548217773 11.97482585906982 13.24877548217773 L 3.482073068618774 13.24877548217773 C 1.938491582870483 13.24877548217773 0.9767493605613708 11.57434749603271 1.754515290260315 10.24103355407715 Z">
			</path>
		</svg>
		<svg class="_709">
			<rect id="_709" rx="0" ry="0" x="0" y="0" width="100.979" height="2.705">
			</rect>
		</svg>
		<svg class="_710">
			<rect id="_710" rx="0" ry="0" x="0" y="0" width="73.931" height="2.705">
			</rect>
		</svg>
		<svg class="_711">
			<rect id="_711" rx="0" ry="0" x="0" y="0" width="100.979" height="2.705">
			</rect>
		</svg>
		<svg class="_712">
			<rect id="_712" rx="0" ry="0" x="0" y="0" width="48.686" height="2.705">
			</rect>
		</svg>
		<div id="ID67">
			<span><%= basic %>%</span>
		</div>
		<div id="ID45">
			<span><%= hard %>%</span>
		</div>
		<img id="daniel-bystedt-rob-1_cb" src="./views/mypage/daniel-bystedt-rob-1_cb.png" srcset="./views/mypage/daniel-bystedt-rob-1_cb.png 1x, ./views/mypage/daniel-bystedt-rob-1_cb@2x.png 2x">
			
		<svg class="_7" viewBox="0 0 15.457 13.249">
			<path id="_7" d="M 6.00089168548584 2.961528778076172 C 6.772647857666016 1.638517737388611 8.684250831604004 1.638517737388611 9.45600700378418 2.961528539657593 L 13.70238399505615 10.24103355407715 C 14.480149269104 11.5743465423584 13.51840686798096 13.24877548217773 11.97482585906982 13.24877548217773 L 3.482073068618774 13.24877548217773 C 1.938491582870483 13.24877548217773 0.9767493605613708 11.57434749603271 1.754515290260315 10.24103355407715 Z">
			</path>
		</svg>
		<svg class="_722">
			<rect id="_722" rx="16" ry="16" x="0" y="0" width="48.579" height="48.579">
			</rect>
		</svg>
		<svg class="_11" viewBox="0 0 15.457 13.249">
			<path id="_11" d="M 6.00089168548584 2.961528778076172 C 6.772647857666016 1.638517737388611 8.684250831604004 1.638517737388611 9.45600700378418 2.961528539657593 L 13.70238399505615 10.24103355407715 C 14.480149269104 11.5743465423584 13.51840686798096 13.24877548217773 11.97482585906982 13.24877548217773 L 3.482073068618774 13.24877548217773 C 1.938491582870483 13.24877548217773 0.9767493605613708 11.57434749603271 1.754515290260315 10.24103355407715 Z">
			</path>
		</svg>
	</div>
	<div id="_14">
		<svg class="_12">
			<rect id="_12" rx="20" ry="20" x="0" y="0" width="650" height="99">
			</rect>
		</svg>
		<div id="_10">
			<div id="_9">
				<div id="Title">
					<span>Title</span>
				</div>
			</div>
		</div>
		<div id="_Hi_Mike_thanks_for_applying_f">
			<span> Hi Mike, thanks for applying for UI/UX Designer. We are reviewing resume's and will follow up in the...</span>
		</div>
		<div id="_20210724__1130">
			<span>작성일: 2021.07.24 오전 11:30</span>
		</div>
	</div>
	<div id="__">
		<span>내 글 목록</span>
	</div>
	<div id="Header">
		<div id="_co">
			<span>로그인</span>
		</div>
		<div id="home_button">
			<svg class="_58_cr">
				<linearGradient id="_58_cr" spreadMethod="pad" x1="-1.553" x2="2.471" y1="-0.068" y2="1">
					<stop offset="0" stop-color="#54b192" stop-opacity="1"></stop>
					<stop offset="1" stop-color="#1ce39f" stop-opacity="1"></stop>
				</linearGradient>
				<ellipse id="_58_cr" rx="28.5" ry="28.5" cx="28.5" cy="28.5">
				</ellipse>
			</svg>
			<div id="_cs">
				<span>#.</span>
			</div>
		</div>
		<div id="profile" class="profile">
			<svg class="down" viewBox="179.957 890.373 8.589 3.83">
				<path id="down" d="M 179.9566497802734 894.202880859375 L 182.1039428710938 892.287841796875 L 184.251220703125 890.3729248046875 L 188.5458068847656 894.202880859375">
				</path>
			</svg>
			<div id="OOO">
				<span>OOO님</span>
			</div>
			<img id="profile_cw" src="./views/mypage/profile_cw.png" srcset="profile_cw.png 1x, profile_cw@2x.png 2x">
				
		</div>
	</div>
	<div id="_2327">
		<svg class="_12_cy">
			<rect id="_12_cy" rx="20" ry="20" x="0" y="0" width="650" height="99">
			</rect>
		</svg>
		<div id="_10_cz">
			<div id="_9_c">
				<div id="Title_c">
					<span>Title</span>
				</div>
			</div>
		</div>
		<div id="_Hi_Mike_thanks_for_applying_f_c">
			<span> Hi Mike, thanks for applying for UI/UX Designer. We are reviewing resume's and will follow up in the...</span>
		</div>
		<div id="_20210724__1130_c">
			<span>작성일: 2021.07.24 오전 11:30</span>
		</div>
	</div>
	<div id="_c">
		<span>마이페이지</span>
	</div>
	<div id="_da">
		<span>질문하기</span>
	</div>
	<div id="_db">
		<span>심화학습</span>
	</div>
	<div id="_dc">
		<span>기초학습</span>
	</div>
	<div id="_dd">
		<span>소개</span>
	</div>
</div>
</body>
</html>